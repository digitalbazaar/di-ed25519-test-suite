{
  "matrices": [
    {
      "title": "Data Integrity (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:9db255a3-8228-4d54-b25f-17e5118a4ffe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:8f15c65d-c810-4289-966d-9efeba644407",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:27dd61da-a0be-47f0-b14e-e0d6e748e6d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:e2e1af60-a4ef-4fba-b8e4-7fd671aee81f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:4b354552-9453-421b-a552-16279db8442e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:9d601aa9-4ece-4de8-9bf4-cbdd78881ff6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:5aa192b6-cadc-4575-a0f7-4eb4265761e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:9ef00b58-a2ec-45e9-b63f-228124760bdc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:f195b8c0-cc9e-4ad0-a511-ffe02f8abf24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:b46bc85e-45d2-4135-aad9-ad927c6f2f90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:efa31dec-b42c-4cd3-b96e-a362e26befdc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:fcebe95d-5bab-43a9-a70b-ecdb989327d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:c37aec16-4510-4a50-b016-7f1fcbe692ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:d38b12c9-8fb5-41c5-ad88-8e6acec4e422",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3950,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0ikKxycGoVykJQQj7724z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:57ec49bc-436b-43a0-abaf-2d208e4f570c"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:d051eca4-e27e-4bbb-b131-12dbb3bc5494",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:f040f8cf-b265-4a54-ad50-964967adeaf4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:97cf8faa-7fe5-475f-8328-c43513ac6ee4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:7d2db4cc-9761-4ba0-a5af-a184f8176bf5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:77f109d2-ebd2-46be-bc2e-87aba5b246e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:95c5dc11-c891-4f30-b013-91e3a93f4f3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:447bf21a-503d-4a92-9691-64fc2acc9ade",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:beaa12b3-75a3-43f3-9f7d-acd437093e34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:7d724b14-8f1a-46bc-97c1-298936807063",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:26fd1e71-3dad-4933-a7f3-ddf974967652",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:e3acead2-9fbd-4769-8b77-438dc4cb6fbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:0b1f380f-f731-434b-861b-46daaa81d96d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:adb03d55-e882-4a1e-9a2f-4a47f6548773",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:a6add9ab-81cf-44bf-a567-a54871e95f6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Danube Tech\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 924,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0ikKxycGoVykJQQj7724z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:fbc33d81-b1f0-48eb-9066-b2fb580c5a0c"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:ff94255e-d31f-454e-900d-45206c9d3dea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:efdf0988-2b2b-487a-a313-9c7f9583c9c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:fec2af32-8460-4d27-985f-16b59bb45834",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:64455687-cb0c-494e-bbda-1b7febe5e787",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:ad1d2d61-237d-4aad-8034-2a37c8490b82",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:487522e6-da5d-4c10-8035-774a99366541",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:f9389b51-8c9a-489a-a818-625195314b4a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:ebdbf29c-d929-47cc-b438-e1b238d46c4d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:d86d847c-3760-4576-bf2b-a083bb70719a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:02377ebd-82d4-46b9-ad46-44fe79da07be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:3d7361d6-3bc3-4106-b178-125b7b689e06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:a3e2bdf5-36e8-4dd8-9d5f-7bf21be21ad6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:b9521137-e8be-4070-af45-08eaa2db9727",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:9c177a6c-90c4-4563-b109-053d6be36f23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6641,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1585,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0ikKxycGoVykJQQj7724z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:035913d9-ca88-4014-bc4f-e3f2c71fe016"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:678b48f1-c888-4a2f-a3f3-5334c55072c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:6d88f435-8628-47cc-9a4b-365d6168b368",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:e469e46d-dffb-4f04-8afa-a86e14dad296",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:37e7944e-b466-4b6b-9a2a-393f2f22cc7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:138:32)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:5f9eebe5-eab0-4344-869e-365a74ff7f7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:6f09c8b8-4e2a-49fc-9062-a13d87aec1f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:11f1ce9b-cd06-45df-8da1-0f9a658274e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:b9385e4d-dbde-4f1a-97c0-4060ec1e8a2c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:3d626e49-4774-4003-8c71-527d44251e14",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { type: 'Ed25519Signature2018', …(4) } to have property 'proofValue'",
                "showDiff": false,
                "actual": {
                  "type": "Ed25519Signature2018",
                  "proofPurpose": "assertionMethod",
                  "verificationMethod": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                  "created": "2024-05-12T05:01:29.723Z",
                  "jws": "eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..CIb99_CmOlczTgqzeDCkbStt8KR9QKhxSPaG3Tt_jJPEwSp51ecV7ZIL5LKmOHGVbgHgnOoMp4dKP6Fsvs1FDg"
                },
                "stack": "AssertionError: expected { type: 'Ed25519Signature2018', …(4) } to have property 'proofValue'\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:222:29)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:c0536b6f-9934-4f90-b58a-a2545b8caf79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "failed",
              "err": {}
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:418cf410-cb29-4ef2-abaa-5ab7583b1974",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:470b9b54-b6f7-46d8-943f-c441d4780b70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:63995dcd-31be-412c-9763-136d680aece3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:3569c66d-8e83-48b3-a10d-09334b3c3328",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"EWF\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8228,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 136,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0ikKxycGoVykJQQj7724z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:89a590dd-78e2-4150-b1c2-344ce820c0ef"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:d46a3214-ca7d-4544-8567-90e3c4c0b168",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:b813e360-fc98-4c95-9997-0971964e73d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:39693737-cd35-424e-b8d1-076452fc9f2c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:ff1cc978-d579-477b-8378-fa07789f39d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:155:37)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:e623a747-84ba-445c-914e-8b4a9024880a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:d7ab1986-1453-4856-b8f8-1373a3a180cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:29369d13-df3e-477f-b824-ce159eda86b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:a6e3f9cd-8cf0-4d88-9020-44a565558be5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:c80237ab-73e2-40e3-89b6-a899a6095bff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:fb1dc315-0945-4179-b786-b09968b01f3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:0795960a-2b68-47c7-a875-428e58d84a6e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:6bc1125b-e6d0-4e34-8ef4-aadbf8a801d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:da457ab4-fee6-4b87-8812-81aed80b9470",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:71c7ee9c-5608-41b9-9853-ef0f99428113",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"LearnCard\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8371,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 326,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0ikKxycGoVykJQQj7724z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:700d4398-2448-4f34-89c2-1a73db63766e"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:91179529-391a-49c0-b433-a64d2607ea94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:10f463e6-c125-44fa-93b1-fd845f7fec3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:34e50537-a7e6-4270-af64-630cc22f867c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:f2f5445d-d970-4f93-a8f8-f2a4e1a315b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:155:37)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:4e84bc32-5a81-495a-b130-d70b28c711e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:521a574e-3c63-4be2-a3c2-9387c896e921",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:7ad27472-4fee-4d42-a54e-ea6aa3d38438",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:3fc0fa66-76d4-4cdd-a1cb-d5c90e152c88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:ead16ba9-c9cf-448e-a806-2337e7653fcb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:f3a37d16-dcbb-4428-a946-e224a124c6b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:5f331c26-2d62-4ad7-8a44-5e36be7e7a6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:7d6589ea-d05a-4ba3-907b-dcef53e49423",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:8ad3806e-525e-4fad-b0c9-badacf17871d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:355a272c-d756-4feb-84e1-69212933ea04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8702,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 348,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0ikKxycGoVykJQQj7724z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:a4525d2e-fcd2-40ab-a484-a49e22a2c2db"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:b09366f3-6747-4dc0-b6e3-cae0e09839b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:f4a7526b-aeff-4668-8f05-ba4484596457",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:26ef5650-ecc3-464c-ba86-2d9ae299a5a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:afe5d8ab-0c23-40b3-ae74-2ef8dee959f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:a6b15a64-f141-494c-a327-f9eaa122c863",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:fc557fe2-623d-4293-abab-345934ef8d36",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:9e687d70-52a3-4a74-a0f5-3e222fab8afa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:233ce02f-11dc-4745-afa3-d2857d8c9997",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:847bf0f3-64cc-4c70-9907-4509828a2925",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:221ad981-e65f-46b3-b16b-63676af051c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:6f2a946e-cb0b-402b-af9f-13b1b8fa10b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:c55be43c-c38e-4b7d-b20f-6c409d40eb9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:1d8b37c0-626c-4952-9005-78876718ed6e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:bd9e6e23-5ab2-4ac7-9466-7e1d72d3e3fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 425,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "0ikKxycGoVykJQQj7724z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:48b75139-8775-4603-842b-8e5355703623"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "6tfiGiYtBKmWhwWj0PZQC",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:90185d87-9c83-4cfe-8f00-baaa4b9144c9",
      "columns": [
        "apicatalog.com",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:9db255a3-8228-4d54-b25f-17e5118a4ffe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:d051eca4-e27e-4bbb-b131-12dbb3bc5494",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:ff94255e-d31f-454e-900d-45206c9d3dea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:678b48f1-c888-4a2f-a3f3-5334c55072c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:d46a3214-ca7d-4544-8567-90e3c4c0b168",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:91179529-391a-49c0-b433-a64d2607ea94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:b09366f3-6747-4dc0-b6e3-cae0e09839b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:8f15c65d-c810-4289-966d-9efeba644407",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:f040f8cf-b265-4a54-ad50-964967adeaf4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:efdf0988-2b2b-487a-a313-9c7f9583c9c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:6d88f435-8628-47cc-9a4b-365d6168b368",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:b813e360-fc98-4c95-9997-0971964e73d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:10f463e6-c125-44fa-93b1-fd845f7fec3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:f4a7526b-aeff-4668-8f05-ba4484596457",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:27dd61da-a0be-47f0-b14e-e0d6e748e6d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:97cf8faa-7fe5-475f-8328-c43513ac6ee4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:fec2af32-8460-4d27-985f-16b59bb45834",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:e469e46d-dffb-4f04-8afa-a86e14dad296",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:39693737-cd35-424e-b8d1-076452fc9f2c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:34e50537-a7e6-4270-af64-630cc22f867c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:26ef5650-ecc3-464c-ba86-2d9ae299a5a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:e2e1af60-a4ef-4fba-b8e4-7fd671aee81f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:7d2db4cc-9761-4ba0-a5af-a184f8176bf5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:64455687-cb0c-494e-bbda-1b7febe5e787",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:37e7944e-b466-4b6b-9a2a-393f2f22cc7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:138:32)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:ff1cc978-d579-477b-8378-fa07789f39d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:155:37)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:f2f5445d-d970-4f93-a8f8-f2a4e1a315b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:155:37)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:afe5d8ab-0c23-40b3-ae74-2ef8dee959f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:4b354552-9453-421b-a552-16279db8442e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:77f109d2-ebd2-46be-bc2e-87aba5b246e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:ad1d2d61-237d-4aad-8034-2a37c8490b82",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:5f9eebe5-eab0-4344-869e-365a74ff7f7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:e623a747-84ba-445c-914e-8b4a9024880a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:4e84bc32-5a81-495a-b130-d70b28c711e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:a6b15a64-f141-494c-a327-f9eaa122c863",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:9d601aa9-4ece-4de8-9bf4-cbdd78881ff6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:95c5dc11-c891-4f30-b013-91e3a93f4f3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:487522e6-da5d-4c10-8035-774a99366541",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:6f09c8b8-4e2a-49fc-9062-a13d87aec1f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:d7ab1986-1453-4856-b8f8-1373a3a180cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:521a574e-3c63-4be2-a3c2-9387c896e921",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:fc557fe2-623d-4293-abab-345934ef8d36",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:5aa192b6-cadc-4575-a0f7-4eb4265761e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:447bf21a-503d-4a92-9691-64fc2acc9ade",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:f9389b51-8c9a-489a-a818-625195314b4a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:11f1ce9b-cd06-45df-8da1-0f9a658274e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:29369d13-df3e-477f-b824-ce159eda86b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:7ad27472-4fee-4d42-a54e-ea6aa3d38438",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:9e687d70-52a3-4a74-a0f5-3e222fab8afa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:9ef00b58-a2ec-45e9-b63f-228124760bdc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:beaa12b3-75a3-43f3-9f7d-acd437093e34",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:ebdbf29c-d929-47cc-b438-e1b238d46c4d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:b9385e4d-dbde-4f1a-97c0-4060ec1e8a2c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:a6e3f9cd-8cf0-4d88-9020-44a565558be5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:3fc0fa66-76d4-4cdd-a1cb-d5c90e152c88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:233ce02f-11dc-4745-afa3-d2857d8c9997",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:f195b8c0-cc9e-4ad0-a511-ffe02f8abf24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:7d724b14-8f1a-46bc-97c1-298936807063",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:d86d847c-3760-4576-bf2b-a083bb70719a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:3d626e49-4774-4003-8c71-527d44251e14",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { type: 'Ed25519Signature2018', …(4) } to have property 'proofValue'",
                "showDiff": false,
                "actual": {
                  "type": "Ed25519Signature2018",
                  "proofPurpose": "assertionMethod",
                  "verificationMethod": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                  "created": "2024-05-12T05:01:29.723Z",
                  "jws": "eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..CIb99_CmOlczTgqzeDCkbStt8KR9QKhxSPaG3Tt_jJPEwSp51ecV7ZIL5LKmOHGVbgHgnOoMp4dKP6Fsvs1FDg"
                },
                "stack": "AssertionError: expected { type: 'Ed25519Signature2018', …(4) } to have property 'proofValue'\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:222:29)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:c80237ab-73e2-40e3-89b6-a899a6095bff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:ead16ba9-c9cf-448e-a806-2337e7653fcb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:847bf0f3-64cc-4c70-9907-4509828a2925",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
          "cells": [
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:b46bc85e-45d2-4135-aad9-ad927c6f2f90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:26fd1e71-3dad-4933-a7f3-ddf974967652",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:02377ebd-82d4-46b9-ad46-44fe79da07be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:c0536b6f-9934-4f90-b58a-a2545b8caf79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "failed",
              "err": {}
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:fb1dc315-0945-4179-b786-b09968b01f3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:f3a37d16-dcbb-4428-a946-e224a124c6b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n\n      for(const proof of proofs) {\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n\n        proof.proofValue.slice(0, 1)\n          .should.equal(\n            expectedPrefix,\n            `Expected \"proof.proofValue\" to be a ${encodingName} value`\n          );\n\n        isValidMultibaseEncoded(proof.proofValue, expectedPrefix).should\n          .equal(\n            true,\n            `Expected \"proof.proofValue\" to be a valid ${encodingName} value`\n          );\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:221ad981-e65f-46b3-b16b-63676af051c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The contents of the value (\"proof.proofValue\") MUST be expressed with a header and encoding as described in Section 2.4 Multibase."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:efa31dec-b42c-4cd3-b96e-a362e26befdc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:e3acead2-9fbd-4769-8b77-438dc4cb6fbb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:3d7361d6-3bc3-4106-b178-125b7b689e06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:418cf410-cb29-4ef2-abaa-5ab7583b1974",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:0795960a-2b68-47c7-a875-428e58d84a6e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:5f331c26-2d62-4ad7-8a44-5e36be7e7a6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:6f2a946e-cb0b-402b-af9f-13b1b8fa10b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:fcebe95d-5bab-43a9-a70b-ecdb989327d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:0b1f380f-f731-434b-861b-46daaa81d96d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:a3e2bdf5-36e8-4dd8-9d5f-7bf21be21ad6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:470b9b54-b6f7-46d8-943f-c441d4780b70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:6bc1125b-e6d0-4e34-8ef4-aadbf8a801d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:7d6589ea-d05a-4ba3-907b-dcef53e49423",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:c55be43c-c38e-4b7d-b20f-6c409d40eb9f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:c37aec16-4510-4a50-b016-7f1fcbe692ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:adb03d55-e882-4a1e-9a2f-4a47f6548773",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:b9521137-e8be-4070-af45-08eaa2db9727",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:63995dcd-31be-412c-9763-136d680aece3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:da457ab4-fee6-4b87-8812-81aed80b9470",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:8ad3806e-525e-4fad-b0c9-badacf17871d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:1d8b37c0-626c-4952-9005-78876718ed6e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "61Y4jyQPM3HHIgc-8cVjh",
              "ctx": null,
              "_testId": "urn:uuid:d38b12c9-8fb5-41c5-ad88-8e6acec4e422",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "RB2i1HtTJgutdDEi-HWTF",
              "ctx": null,
              "_testId": "urn:uuid:a6add9ab-81cf-44bf-a567-a54871e95f6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "y3QMs9d3Kme3KJnwLUF9x",
              "ctx": null,
              "_testId": "urn:uuid:9c177a6c-90c4-4563-b109-053d6be36f23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "DIhA3h-r4RRzryYju2L7-",
              "ctx": null,
              "_testId": "urn:uuid:3569c66d-8e83-48b3-a10d-09334b3c3328",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "ewpI-DV6CO2ilTv6w2lcF",
              "ctx": null,
              "_testId": "urn:uuid:71c7ee9c-5608-41b9-9853-ef0f99428113",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "aG3XRmy3oOT48eMI_Syfr",
              "ctx": null,
              "_testId": "urn:uuid:355a272c-d756-4feb-84e1-69212933ea04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MEp-oRSMM4GgbxLfA4dFu",
              "ctx": null,
              "_testId": "urn:uuid:bd9e6e23-5ab2-4ac7-9466-7e1d72d3e3fc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Ed25519Signature2020 (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "R0ZHwrkZA3R8sh_bu8wM9",
              "ctx": null,
              "_testId": "urn:uuid:018719fa-9f17-4ae3-80a5-029b1155f31e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9642,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "R0ZHwrkZA3R8sh_bu8wM9",
              "ctx": null,
              "_testId": "urn:uuid:c887e2fd-cef7-42c1-b6c6-b53a2ab8a133",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9643,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:a18d8407-aa68-4365-a356-4ebb3066e8fc\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-12T05:01:30Z\",\"proofValue\":\"z616AiWFQZPTNX8vZtg7FBC5yW6LcAaXkC4hDguurQL5M5PNmRQLN36EsVUVk7okwPgCGSqLfic2g22hsX3SwhrQm\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:a18d8407-aa68-4365-a356-4ebb3066e8fc",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:01:30Z",
                          "proofValue": "z616AiWFQZPTNX8vZtg7FBC5yW6LcAaXkC4hDguurQL5M5PNmRQLN36EsVUVk7okwPgCGSqLfic2g22hsX3SwhrQm"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:103:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has('Ed25519Signature2020'));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "R0ZHwrkZA3R8sh_bu8wM9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9482,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "3mm8xq0z_NnVsX127ruJ3",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:ec2fe88c-3b6b-4214-b1f9-20e76acc0086"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "OptzVki8ley6D9PzHLZIH",
              "ctx": null,
              "_testId": "urn:uuid:c46655a8-32f6-4aa7-9771-22cd9c733a29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "OptzVki8ley6D9PzHLZIH",
              "ctx": null,
              "_testId": "urn:uuid:490eee21-4013-4d3f-a1ae-643279a0caab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10055,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1424,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Danube Tech\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has('Ed25519Signature2020'));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OptzVki8ley6D9PzHLZIH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9779,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 274,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "3mm8xq0z_NnVsX127ruJ3",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:5e9c4b9d-1531-4aa8-9d6d-b73faf896187"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MCTuQuL1XIZ-azV85i2sZ",
              "ctx": null,
              "_testId": "urn:uuid:e4cd97f1-aff3-4efa-a449-253a7ea8a4a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12731,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MCTuQuL1XIZ-azV85i2sZ",
              "ctx": null,
              "_testId": "urn:uuid:38e1af5e-e62b-4601-924b-acd91caa8c5a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12732,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1165,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has('Ed25519Signature2020'));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MCTuQuL1XIZ-azV85i2sZ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1252,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "3mm8xq0z_NnVsX127ruJ3",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:3eb58e7d-ebe6-448a-87ab-04d08b0d65ea"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "N3H8bozS1gKwTciXJclHe",
              "ctx": null,
              "_testId": "urn:uuid:5a347f06-77b1-43eb-a14f-4bce24c8ddd3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one Ed25519 proof.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one Ed25519 proof.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:71:42)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "N3H8bozS1gKwTciXJclHe",
              "ctx": null,
              "_testId": "urn:uuid:591944a5-2270-40e5-a57d-433764acf172",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"EWF\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has('Ed25519Signature2020'));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "N3H8bozS1gKwTciXJclHe",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "3mm8xq0z_NnVsX127ruJ3",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:3e41740c-b98d-4bf4-bd8c-f2d3df89cfe6"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "NGI_-vEWopN7nolq7G5JP",
              "ctx": null,
              "_testId": "urn:uuid:430ec446-aee2-4e46-bf4b-562048decb87",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14462,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "NGI_-vEWopN7nolq7G5JP",
              "ctx": null,
              "_testId": "urn:uuid:7d758c28-4f37-40e7-aafd-1bb6dc5188f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"LearnCard\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has('Ed25519Signature2020'));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NGI_-vEWopN7nolq7G5JP",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14040,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 423,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "3mm8xq0z_NnVsX127ruJ3",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:2c4a48bc-b15d-43d4-b561-198e994c45fd"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "cMMRPtN3cM6ckr7rHWWxI",
              "ctx": null,
              "_testId": "urn:uuid:f2da34a8-2381-4733-ad60-a8e7f1cf48b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "cMMRPtN3cM6ckr7rHWWxI",
              "ctx": null,
              "_testId": "urn:uuid:3994a908-8f94-4cd1-bec3-d39794bc7e74",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has('Ed25519Signature2020'));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "cMMRPtN3cM6ckr7rHWWxI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14615,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 346,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "3mm8xq0z_NnVsX127ruJ3",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:e48a96d6-5875-472b-99ac-97ae64887548"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "alCnIlL-cS--cGTaNkYME",
              "ctx": null,
              "_testId": "urn:uuid:222a138b-5631-4d3d-8f97-0ede9c22ab5a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "alCnIlL-cS--cGTaNkYME",
              "ctx": null,
              "_testId": "urn:uuid:c8276715-3f46-4060-b766-61e37a6ffc96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has('Ed25519Signature2020'));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "alCnIlL-cS--cGTaNkYME",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15065,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 331,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "3mm8xq0z_NnVsX127ruJ3",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:565dd3d7-bb52-49b5-b83f-a8349f9cb983"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "6tfiGiYtBKmWhwWj0PZQC",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:2c04dcca-2672-4d5b-8228-201b83cc4950",
      "columns": [
        "apicatalog.com",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
          "cells": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "R0ZHwrkZA3R8sh_bu8wM9",
              "ctx": null,
              "_testId": "urn:uuid:018719fa-9f17-4ae3-80a5-029b1155f31e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9642,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "OptzVki8ley6D9PzHLZIH",
              "ctx": null,
              "_testId": "urn:uuid:c46655a8-32f6-4aa7-9771-22cd9c733a29",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MCTuQuL1XIZ-azV85i2sZ",
              "ctx": null,
              "_testId": "urn:uuid:e4cd97f1-aff3-4efa-a449-253a7ea8a4a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12731,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "N3H8bozS1gKwTciXJclHe",
              "ctx": null,
              "_testId": "urn:uuid:5a347f06-77b1-43eb-a14f-4bce24c8ddd3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one Ed25519 proof.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one Ed25519 proof.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:71:42)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "NGI_-vEWopN7nolq7G5JP",
              "ctx": null,
              "_testId": "urn:uuid:430ec446-aee2-4e46-bf4b-562048decb87",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14462,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "cMMRPtN3cM6ckr7rHWWxI",
              "ctx": null,
              "_testId": "urn:uuid:f2da34a8-2381-4733-ad60-a8e7f1cf48b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "alCnIlL-cS--cGTaNkYME",
              "ctx": null,
              "_testId": "urn:uuid:222a138b-5631-4d3d-8f97-0ede9c22ab5a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "R0ZHwrkZA3R8sh_bu8wM9",
              "ctx": null,
              "_testId": "urn:uuid:c887e2fd-cef7-42c1-b6c6-b53a2ab8a133",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9643,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:a18d8407-aa68-4365-a356-4ebb3066e8fc\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-12T05:01:30Z\",\"proofValue\":\"z616AiWFQZPTNX8vZtg7FBC5yW6LcAaXkC4hDguurQL5M5PNmRQLN36EsVUVk7okwPgCGSqLfic2g22hsX3SwhrQm\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:a18d8407-aa68-4365-a356-4ebb3066e8fc",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:01:30Z",
                          "proofValue": "z616AiWFQZPTNX8vZtg7FBC5yW6LcAaXkC4hDguurQL5M5PNmRQLN36EsVUVk7okwPgCGSqLfic2g22hsX3SwhrQm"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:103:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "OptzVki8ley6D9PzHLZIH",
              "ctx": null,
              "_testId": "urn:uuid:490eee21-4013-4d3f-a1ae-643279a0caab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10055,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1424,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "MCTuQuL1XIZ-azV85i2sZ",
              "ctx": null,
              "_testId": "urn:uuid:38e1af5e-e62b-4601-924b-acd91caa8c5a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12732,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "N3H8bozS1gKwTciXJclHe",
              "ctx": null,
              "_testId": "urn:uuid:591944a5-2270-40e5-a57d-433764acf172",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "NGI_-vEWopN7nolq7G5JP",
              "ctx": null,
              "_testId": "urn:uuid:7d758c28-4f37-40e7-aafd-1bb6dc5188f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "cMMRPtN3cM6ckr7rHWWxI",
              "ctx": null,
              "_testId": "urn:uuid:3994a908-8f94-4cd1-bec3-d39794bc7e74",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "alCnIlL-cS--cGTaNkYME",
              "ctx": null,
              "_testId": "urn:uuid:c8276715-3f46-4060-b766-61e37a6ffc96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:69cc06c7-8046-4984-9aaf-3e8b91ba3100",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:8caf99d5-512c-4d40-9cea-a75a39acc76f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:8c71d41e-8335-4c3b-b526-48c3ed7c4e57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:2060fa23-5b5b-499a-8a73-2fbdb4fc1483",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:c7b181d0-accc-41b6-a354-e0f482f60275",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15921,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:4d243def-29bd-4b78-bbbd-38464a78cc90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:764cd225-37a9-456d-a560-0f768e395391",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:e8a319de-a12b-428f-a360-b1093d5da34d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:ca173f71-acc9-45a4-8f02-e6a1975e2e93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:2e168cf2-e06e-464b-8f61-93b26bd2951b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:d290c8cf-d6b6-4432-9d47-8a971ec070c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16403,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:217d9dc5-4928-4a8b-9128-402fb0a779b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:7a71dcba-2083-4496-95c7-994ade351a39",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:e3df0805-d03e-4ebb-99e0-84ef3a01b0c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16634,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:3fb0afc2-0d4e-4659-9b93-0998d73f5b81",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16721,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SCBh_1sGlLoQHYGiWBFSi",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:f03b2b98-bc99-4bcf-a5db-441dbc0a64c1"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:9a7ea62b-adcb-4b04-8837-e6338f1343b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16799,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1651,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:6477b2ed-b0bd-4429-bf6e-f0c3069361e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18451,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 603,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:73abbb02-e867-4139-bdd6-a777e667ee64",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19055,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:5781a360-a161-4706-8b6a-a45e9e768064",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 288,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:b39ea609-bf47-42bc-abc2-184615d57a52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 583,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:348ef9fe-7833-42bd-86a4-58f67e234008",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 708,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:33694fc8-63ba-475a-a0ec-6ec1852dc7ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 739,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:b779d4e1-b002-4974-9b27-2b8d66b03f98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21661,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 285,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:c886718d-3577-418b-b609-1eb046346c93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 714,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:42864147-9e1f-4deb-8b5d-ac9d196514e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22661,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 721,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:64418242-a566-4e3d-a87c-663fe54d3f13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 726,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:0e88fdac-b79a-4848-be0a-6d8effc29837",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 713,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:acc40ebd-156f-4f8f-95ea-a7db1f8c8525",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 795,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:4e53c8f9-1fd8-4a19-aff1-12f2f070f5fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25617,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 721,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:9e82fc1e-94de-4d7f-b484-78202f010e3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 721,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Danube Tech\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16799,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SCBh_1sGlLoQHYGiWBFSi",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:34eddedb-1dc1-45b1-8fbf-7bfd6a3a9843"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:e3e0a361-8d03-4275-b243-15881b1ef469",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:d20fb3e4-cb12-4033-bfac-20a899b7879b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27225,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 671,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:f970dbfe-b2c3-4ae4-83be-883372d39999",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:8868fc70-c2f0-4bce-9637-8f1d94abba59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:fd9bb8ca-2513-4c67-9d6d-efd7754d2e22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28123,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:28e7cf1e-d3c3-4cdf-881f-ae539536ef23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28237,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:8f95ca0d-2d99-411b-989d-f80a63229a9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:bf4b783e-0b10-4e1d-8f2f-23ee79f48c56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:03f204c2-f7e6-4b2f-93f6-f021854aba21",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:11199de0-4097-4df5-935d-d921ef3bc185",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28658,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:73455323-d5b5-4899-8dd2-3011a09cce94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:fecaa5cc-3d32-408b-a492-78b65e9ac106",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:3760f322-8dd9-46c4-85ee-1bf243dffda2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:50809be0-2e7b-4254-939e-26482ba9862c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:d8ef65a9-c508-4436-805a-b16838777f78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29177,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SCBh_1sGlLoQHYGiWBFSi",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:4f7b9e58-9125-4df3-b62e-39af6a660647"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:97b1ae70-3bad-4fa2-b3bb-8d43be363f97",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:16b70727-397b-4042-84a2-f1e7dee480ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:cc2d9f6d-c88c-4f74-97f4-44742c284555",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29409,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:f34c8d90-ba52-4c68-a016-605ce429810c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:3a5dbb87-d6c2-4a54-9a76-244caf532374",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29462,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:8819d1f1-ee5b-49a3-835d-57a491805fef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:81920c3a-c257-4706-8e9d-8c5a9519b652",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29520,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:094c06e5-ed86-4aaf-8ef3-8dbb343b9ea2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:6d485e96-664e-4586-a2a7-635e45ea9d2c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:f65de5ec-bb19-42f2-a0ff-193270b030ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:8b5971df-26bb-47eb-bde3-2821644f326e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:e278e527-cebb-4c42-8db5-671e6f26d6a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29663,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:59416f9a-3916-4dfd-9e0b-d1a894cb7f26",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:0772a150-64bb-4ad4-b65d-6f7680b06b8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:89640508-2116-48e8-bdde-a3139081154a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"EWF\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SCBh_1sGlLoQHYGiWBFSi",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:d596a506-0339-479a-aca8-efca0489f3fa"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:2fc62cbc-9fbd-4796-9aac-a37bcc42ed68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29776,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 309,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:7f250c14-fbd6-4060-9180-0c77d4b09056",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:3ec2a7ca-4bb1-4343-b96f-7f04d95195ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:c408281a-23ee-40e2-aa32-41875590b06d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:a589a4f6-c8f1-4d35-a8ac-5638ebda14af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30433,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:68878057-8d2e-4fa7-b67e-c968cfcc7894",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:12fcc71a-ff77-4e40-9d45-44728fc9509f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:589e6b15-5e9d-4934-8092-0037aeab7f8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:bba9c56a-2a5d-4586-8290-0e2b64a9bd45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30914,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:1932eb32-e9ee-43c7-be27-907a732fe4eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31039,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 137,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:a85d1896-2368-4e70-b2cf-5311633a2df6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31177,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:0cf3cd6c-9890-4ee9-86b9-d0e2e94d59f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:cc1edafa-d6c8-4ce1-a467-15a0e274f9d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:d1a9e9a7-e417-491f-8534-8a8db3273396",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:aee57ce9-6408-41ee-9494-e74bfa51c2c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 136,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"LearnCard\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29775,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SCBh_1sGlLoQHYGiWBFSi",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:160f7419-8a80-4c98-b0dd-a5af41c2b919"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d717c768-6e58-4ca7-9d1d-1ba3b91e3300",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31831,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:80af0e8e-7620-4f8a-9166-6db4ba5afe06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31931,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d4cb25cf-7305-4e77-81c4-e7d203b96d10",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32023,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:31f4248f-b7bf-460d-a420-de59137087cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:84720cf9-9a65-499d-aebf-36fa350be43e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:654f7901-2819-496f-8a87-fe2f7e930f7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d0d444b8-ec54-4aca-963d-045b074594e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:1e9b30f3-8cd6-4c48-9686-983f107bba03",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:23e4d040-034a-4a48-b271-437811698b91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d9a6f05d-db21-4e79-95c2-6ab5f5ab68db",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:b1f1c7c0-9dda-48e1-88e9-0aecb2ad343b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:5950be18-9e9f-4b7e-925c-33e03a7507ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:0312f998-76a9-4241-a0c2-d0a176de061e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32920,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d1945018-106b-426d-8b13-d1e509013db9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33022,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:0bae1f10-da1a-4e55-824a-88e8739abe79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31831,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SCBh_1sGlLoQHYGiWBFSi",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:ed558166-fd10-467d-9c04-0a34d80cc61a"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:4ecb5e38-29d5-45f0-affd-70b657140558",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:d9ad55a7-9242-4500-8f24-9849bc4cbbfc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33299,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:6c613b33-a93e-4db8-80c6-91814ee413c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:894edf9a-1c43-441f-bb8d-9fb196bada39",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33466,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:29b702c3-5c60-4717-916c-23866af5c5e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:ba6c9bd5-5855-4fd3-93c9-cd0fab90af27",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:2f58d6fc-3557-46fa-811b-d4984fb2b4bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:98c0c60c-e580-4b20-af79-83d6c42b48b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:bd7381a6-e9ed-4376-800e-a18713ef0146",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:b6eda5ff-9fd8-4e53-8dd2-8b31be75f990",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:b0763caa-98df-4d0b-90bb-0628b89e1c9b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:0af8e81c-2615-4962-ad84-736dfb1c5911",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:ab78c938-5d87-481c-9df1-5fae841e86b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:9eb7f8d1-849e-4ca7-8527-c4caf9aba58d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:df8a2c4c-26b6-4c46-aa97-d5101f1450fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34461,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SCBh_1sGlLoQHYGiWBFSi",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:ad1b5637-e8c7-45f7-b473-00db36ef50d4"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "J3vC_EdGgNDPpyGWz9D4p",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:e3e9cd80-8db8-489d-8921-3bb07fa449b5",
      "columns": [
        "apicatalog.com",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:69cc06c7-8046-4984-9aaf-3e8b91ba3100",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:9a7ea62b-adcb-4b04-8837-e6338f1343b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16799,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1651,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:e3e0a361-8d03-4275-b243-15881b1ef469",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:97b1ae70-3bad-4fa2-b3bb-8d43be363f97",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:2fc62cbc-9fbd-4796-9aac-a37bcc42ed68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29776,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 309,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d717c768-6e58-4ca7-9d1d-1ba3b91e3300",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31831,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:4ecb5e38-29d5-45f0-affd-70b657140558",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:8caf99d5-512c-4d40-9cea-a75a39acc76f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:6477b2ed-b0bd-4429-bf6e-f0c3069361e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18451,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 603,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:d20fb3e4-cb12-4033-bfac-20a899b7879b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27225,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 671,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:16b70727-397b-4042-84a2-f1e7dee480ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:7f250c14-fbd6-4060-9180-0c77d4b09056",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:80af0e8e-7620-4f8a-9166-6db4ba5afe06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31931,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:d9ad55a7-9242-4500-8f24-9849bc4cbbfc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33299,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:8c71d41e-8335-4c3b-b526-48c3ed7c4e57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:73abbb02-e867-4139-bdd6-a777e667ee64",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19055,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:f970dbfe-b2c3-4ae4-83be-883372d39999",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:cc2d9f6d-c88c-4f74-97f4-44742c284555",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29409,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:3ec2a7ca-4bb1-4343-b96f-7f04d95195ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d4cb25cf-7305-4e77-81c4-e7d203b96d10",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32023,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:6c613b33-a93e-4db8-80c6-91814ee413c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:2060fa23-5b5b-499a-8a73-2fbdb4fc1483",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:5781a360-a161-4706-8b6a-a45e9e768064",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 288,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:8868fc70-c2f0-4bce-9637-8f1d94abba59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:f34c8d90-ba52-4c68-a016-605ce429810c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:c408281a-23ee-40e2-aa32-41875590b06d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:31f4248f-b7bf-460d-a420-de59137087cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:894edf9a-1c43-441f-bb8d-9fb196bada39",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33466,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:c7b181d0-accc-41b6-a354-e0f482f60275",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15921,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:b39ea609-bf47-42bc-abc2-184615d57a52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 583,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:fd9bb8ca-2513-4c67-9d6d-efd7754d2e22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28123,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:3a5dbb87-d6c2-4a54-9a76-244caf532374",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29462,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:a589a4f6-c8f1-4d35-a8ac-5638ebda14af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30433,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:84720cf9-9a65-499d-aebf-36fa350be43e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:29b702c3-5c60-4717-916c-23866af5c5e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:4d243def-29bd-4b78-bbbd-38464a78cc90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:348ef9fe-7833-42bd-86a4-58f67e234008",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 708,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:28e7cf1e-d3c3-4cdf-881f-ae539536ef23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28237,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:8819d1f1-ee5b-49a3-835d-57a491805fef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:68878057-8d2e-4fa7-b67e-c968cfcc7894",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:654f7901-2819-496f-8a87-fe2f7e930f7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:ba6c9bd5-5855-4fd3-93c9-cd0fab90af27",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:764cd225-37a9-456d-a560-0f768e395391",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:33694fc8-63ba-475a-a0ec-6ec1852dc7ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20922,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 739,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:8f95ca0d-2d99-411b-989d-f80a63229a9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:81920c3a-c257-4706-8e9d-8c5a9519b652",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29520,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:12fcc71a-ff77-4e40-9d45-44728fc9509f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d0d444b8-ec54-4aca-963d-045b074594e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:2f58d6fc-3557-46fa-811b-d4984fb2b4bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:e8a319de-a12b-428f-a360-b1093d5da34d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:b779d4e1-b002-4974-9b27-2b8d66b03f98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21661,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 285,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:bf4b783e-0b10-4e1d-8f2f-23ee79f48c56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:094c06e5-ed86-4aaf-8ef3-8dbb343b9ea2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:589e6b15-5e9d-4934-8092-0037aeab7f8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:1e9b30f3-8cd6-4c48-9686-983f107bba03",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:98c0c60c-e580-4b20-af79-83d6c42b48b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:ca173f71-acc9-45a4-8f02-e6a1975e2e93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:c886718d-3577-418b-b609-1eb046346c93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 714,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:03f204c2-f7e6-4b2f-93f6-f021854aba21",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:419:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:6d485e96-664e-4586-a2a7-635e45ea9d2c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:bba9c56a-2a5d-4586-8290-0e2b64a9bd45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30914,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:23e4d040-034a-4a48-b271-437811698b91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:bd7381a6-e9ed-4376-800e-a18713ef0146",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:2e168cf2-e06e-464b-8f61-93b26bd2951b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:42864147-9e1f-4deb-8b5d-ac9d196514e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22661,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 721,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:11199de0-4097-4df5-935d-d921ef3bc185",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28658,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:f65de5ec-bb19-42f2-a0ff-193270b030ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:1932eb32-e9ee-43c7-be27-907a732fe4eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31039,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 137,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d9a6f05d-db21-4e79-95c2-6ab5f5ab68db",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:b6eda5ff-9fd8-4e53-8dd2-8b31be75f990",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:d290c8cf-d6b6-4432-9d47-8a971ec070c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16403,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:64418242-a566-4e3d-a87c-663fe54d3f13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 726,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:73455323-d5b5-4899-8dd2-3011a09cce94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:8b5971df-26bb-47eb-bde3-2821644f326e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:a85d1896-2368-4e70-b2cf-5311633a2df6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31177,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:b1f1c7c0-9dda-48e1-88e9-0aecb2ad343b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:b0763caa-98df-4d0b-90bb-0628b89e1c9b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:217d9dc5-4928-4a8b-9128-402fb0a779b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:0e88fdac-b79a-4848-be0a-6d8effc29837",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 713,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:fecaa5cc-3d32-408b-a492-78b65e9ac106",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:63:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:450:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:e278e527-cebb-4c42-8db5-671e6f26d6a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29663,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:0cf3cd6c-9890-4ee9-86b9-d0e2e94d59f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 126,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:5950be18-9e9f-4b7e-925c-33e03a7507ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:0af8e81c-2615-4962-ad84-736dfb1c5911",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:7a71dcba-2083-4496-95c7-994ade351a39",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:acc40ebd-156f-4f8f-95ea-a7db1f8c8525",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 795,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:3760f322-8dd9-46c4-85ee-1bf243dffda2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:59416f9a-3916-4dfd-9e0b-d1a894cb7f26",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:cc1edafa-d6c8-4ce1-a467-15a0e274f9d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:0312f998-76a9-4241-a0c2-d0a176de061e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32920,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n\n      // Remove the multibase header to cause validation error\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:ab78c938-5d87-481c-9df1-5fae841e86b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofValue\" field is not multibase-encoded, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:e3df0805-d03e-4ebb-99e0-84ef3a01b0c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16634,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:4e53c8f9-1fd8-4a19-aff1-12f2f070f5fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25617,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 721,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:50809be0-2e7b-4254-939e-26482ba9862c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29082,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:0772a150-64bb-4ad4-b65d-6f7680b06b8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:d1a9e9a7-e417-491f-8534-8a8db3273396",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:d1945018-106b-426d-8b13-d1e509013db9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33022,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:9eb7f8d1-849e-4ca7-8527-c4caf9aba58d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ufDz6IdvsLGbtTeoKG-Ia",
              "ctx": null,
              "_testId": "urn:uuid:3fb0afc2-0d4e-4659-9b93-0998d73f5b81",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16721,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "lYQaTFUsosnW3L1-ykxd5",
              "ctx": null,
              "_testId": "urn:uuid:9e82fc1e-94de-4d7f-b484-78202f010e3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 721,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "E_XzCoWvK9xATQUCtq1wa",
              "ctx": null,
              "_testId": "urn:uuid:d8ef65a9-c508-4436-805a-b16838777f78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29177,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "duPN2nsx5petHS7YlhR65",
              "ctx": null,
              "_testId": "urn:uuid:89640508-2116-48e8-bdde-a3139081154a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "NVcwAz2HofJIcDFI_W6Lk",
              "ctx": null,
              "_testId": "urn:uuid:aee57ce9-6408-41ee-9494-e74bfa51c2c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 136,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eONiQNlo5omdQo8gG7RwZ",
              "ctx": null,
              "_testId": "urn:uuid:0bae1f10-da1a-4e55-824a-88e8739abe79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "fhzuiRGhNIzcJzBSQrINO",
              "ctx": null,
              "_testId": "urn:uuid:df8a2c4c-26b6-4c46-aa97-d5101f1450fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34461,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Ed25519Signature2020 (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "qfXKJwX9b6K5CIIXYmSmJ",
              "ctx": null,
              "_testId": "urn:uuid:0c2235a0-a778-452a-9361-c022b55de3b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3418,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "qfXKJwX9b6K5CIIXYmSmJ",
              "ctx": null,
              "_testId": "urn:uuid:3ab4ca71-f98b-4b70-9185-38879d2967db",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "qfXKJwX9b6K5CIIXYmSmJ",
              "ctx": null,
              "_testId": "urn:uuid:26d4601e-1712-4a34-9bcc-9be5f87ded02",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "qfXKJwX9b6K5CIIXYmSmJ",
              "ctx": null,
              "_testId": "urn:uuid:7bf05e39-4c3f-4a2d-89e0-509e95045600",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iEd6rbT0MlYqjkLqi7x8N",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:f40f1e1a-a31f-493a-b54e-e93c38da2a4d"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eBwLMYiQev0XPeah4aVOr",
              "ctx": null,
              "_testId": "urn:uuid:9de8c3d6-de67-4a57-a88a-77850b28a6ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 861,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eBwLMYiQev0XPeah4aVOr",
              "ctx": null,
              "_testId": "urn:uuid:942d565e-1b88-4755-9b1b-daff862c09ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 490,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eBwLMYiQev0XPeah4aVOr",
              "ctx": null,
              "_testId": "urn:uuid:2d13d626-ffdb-4a70-9bb3-078807127403",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39602,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 497,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eBwLMYiQev0XPeah4aVOr",
              "ctx": null,
              "_testId": "urn:uuid:e03c1136-af52-46fa-a2cb-2decee3fd441",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40100,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 492,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iEd6rbT0MlYqjkLqi7x8N",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:d7e021a0-2b57-490c-96da-7b01cdd80384"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "YgYw91Q-St2t1J330rW5P",
              "ctx": null,
              "_testId": "urn:uuid:65c0e3b1-1344-41e4-9bda-db7cab9717b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40591,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "YgYw91Q-St2t1J330rW5P",
              "ctx": null,
              "_testId": "urn:uuid:9234ecd4-0523-4a47-b79d-03ef43347067",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40706,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "YgYw91Q-St2t1J330rW5P",
              "ctx": null,
              "_testId": "urn:uuid:0c881668-acb8-4824-bf2f-0d3185ab65c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "YgYw91Q-St2t1J330rW5P",
              "ctx": null,
              "_testId": "urn:uuid:489e545e-b85d-4251-a39e-737e7ea8ac3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40943,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iEd6rbT0MlYqjkLqi7x8N",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:93ae3cef-e80e-4615-89e4-1fac6527a4b0"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xk-aYgpsHkvdeJI_vBBNf",
              "ctx": null,
              "_testId": "urn:uuid:1ecd9249-b71c-4b55-9a19-d96c429a8906",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41045,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xk-aYgpsHkvdeJI_vBBNf",
              "ctx": null,
              "_testId": "urn:uuid:b1f785b3-75c2-48e8-9560-c1c29f22510f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41161,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xk-aYgpsHkvdeJI_vBBNf",
              "ctx": null,
              "_testId": "urn:uuid:91b16a95-70d0-4bad-92d3-d7688a8aa6a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xk-aYgpsHkvdeJI_vBBNf",
              "ctx": null,
              "_testId": "urn:uuid:42fe9f8e-2d9a-43c7-85e1-de097e821a3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iEd6rbT0MlYqjkLqi7x8N",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:3434f97f-7512-4442-8ba0-355d56e26d1a"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ijlIIiLYJM1e-gTinXfrA",
              "ctx": null,
              "_testId": "urn:uuid:7a7e2d10-ade0-4eec-9d05-5f97de5c0b7e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41260,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 322,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ijlIIiLYJM1e-gTinXfrA",
              "ctx": null,
              "_testId": "urn:uuid:f45bb0ec-2c10-4dff-87a1-3431416464de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ijlIIiLYJM1e-gTinXfrA",
              "ctx": null,
              "_testId": "urn:uuid:5d5a8e0d-15f6-4da7-af0d-e88632e6c541",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ijlIIiLYJM1e-gTinXfrA",
              "ctx": null,
              "_testId": "urn:uuid:f83438f3-587f-471c-872b-e7c1cb972dab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iEd6rbT0MlYqjkLqi7x8N",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:83db87a0-d99a-4d94-ac6f-93b520a3ab5f"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "bQZrp2ZRbbtazMUVSs0m2",
              "ctx": null,
              "_testId": "urn:uuid:cf86ee55-8036-4b08-a3b7-3d31880efe27",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "bQZrp2ZRbbtazMUVSs0m2",
              "ctx": null,
              "_testId": "urn:uuid:c71487f6-9c82-4088-9ff3-ec8d38b23f90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42117,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "bQZrp2ZRbbtazMUVSs0m2",
              "ctx": null,
              "_testId": "urn:uuid:10bc1fdb-1f76-4bad-8cf3-8241113d3481",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42221,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "bQZrp2ZRbbtazMUVSs0m2",
              "ctx": null,
              "_testId": "urn:uuid:a0efb277-3e25-4c45-bff1-e0f7cd1585d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42321,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iEd6rbT0MlYqjkLqi7x8N",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:b1e4f981-2267-4235-8625-1c997c1ce0e9"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "k-efolQ4r4_gk2vPd9xnt",
              "ctx": null,
              "_testId": "urn:uuid:b7d33519-8feb-455c-828d-504651a99033",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 813,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "k-efolQ4r4_gk2vPd9xnt",
              "ctx": null,
              "_testId": "urn:uuid:4eb4e3ce-0a5b-419c-80a4-67df58ebaf86",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43236,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "k-efolQ4r4_gk2vPd9xnt",
              "ctx": null,
              "_testId": "urn:uuid:232b1b0a-b470-4f3f-8160-38e944b52f62",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "k-efolQ4r4_gk2vPd9xnt",
              "ctx": null,
              "_testId": "urn:uuid:907e4c6a-fc07-4875-b193-8ff8f6f9cb5c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "iEd6rbT0MlYqjkLqi7x8N",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:fdc12f68-bc53-4411-a485-1a5085c96e2d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "J3vC_EdGgNDPpyGWz9D4p",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:86a74286-507d-47be-bd20-fdddb1aff985",
      "columns": [
        "apicatalog.com",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an Ed25519Signature2020 proof",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "qfXKJwX9b6K5CIIXYmSmJ",
              "ctx": null,
              "_testId": "urn:uuid:0c2235a0-a778-452a-9361-c022b55de3b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3418,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eBwLMYiQev0XPeah4aVOr",
              "ctx": null,
              "_testId": "urn:uuid:9de8c3d6-de67-4a57-a88a-77850b28a6ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 861,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "YgYw91Q-St2t1J330rW5P",
              "ctx": null,
              "_testId": "urn:uuid:65c0e3b1-1344-41e4-9bda-db7cab9717b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40591,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xk-aYgpsHkvdeJI_vBBNf",
              "ctx": null,
              "_testId": "urn:uuid:1ecd9249-b71c-4b55-9a19-d96c429a8906",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41045,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ijlIIiLYJM1e-gTinXfrA",
              "ctx": null,
              "_testId": "urn:uuid:7a7e2d10-ade0-4eec-9d05-5f97de5c0b7e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41260,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 322,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "bQZrp2ZRbbtazMUVSs0m2",
              "ctx": null,
              "_testId": "urn:uuid:cf86ee55-8036-4b08-a3b7-3d31880efe27",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "k-efolQ4r4_gk2vPd9xnt",
              "ctx": null,
              "_testId": "urn:uuid:b7d33519-8feb-455c-828d-504651a99033",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 813,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "qfXKJwX9b6K5CIIXYmSmJ",
              "ctx": null,
              "_testId": "urn:uuid:3ab4ca71-f98b-4b70-9185-38879d2967db",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eBwLMYiQev0XPeah4aVOr",
              "ctx": null,
              "_testId": "urn:uuid:942d565e-1b88-4755-9b1b-daff862c09ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 490,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "YgYw91Q-St2t1J330rW5P",
              "ctx": null,
              "_testId": "urn:uuid:9234ecd4-0523-4a47-b79d-03ef43347067",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40706,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xk-aYgpsHkvdeJI_vBBNf",
              "ctx": null,
              "_testId": "urn:uuid:b1f785b3-75c2-48e8-9560-c1c29f22510f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41161,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ijlIIiLYJM1e-gTinXfrA",
              "ctx": null,
              "_testId": "urn:uuid:f45bb0ec-2c10-4dff-87a1-3431416464de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "bQZrp2ZRbbtazMUVSs0m2",
              "ctx": null,
              "_testId": "urn:uuid:c71487f6-9c82-4088-9ff3-ec8d38b23f90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42117,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "k-efolQ4r4_gk2vPd9xnt",
              "ctx": null,
              "_testId": "urn:uuid:4eb4e3ce-0a5b-419c-80a4-67df58ebaf86",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43236,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "qfXKJwX9b6K5CIIXYmSmJ",
              "ctx": null,
              "_testId": "urn:uuid:26d4601e-1712-4a34-9bcc-9be5f87ded02",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eBwLMYiQev0XPeah4aVOr",
              "ctx": null,
              "_testId": "urn:uuid:2d13d626-ffdb-4a70-9bb3-078807127403",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39602,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 497,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "YgYw91Q-St2t1J330rW5P",
              "ctx": null,
              "_testId": "urn:uuid:0c881668-acb8-4824-bf2f-0d3185ab65c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xk-aYgpsHkvdeJI_vBBNf",
              "ctx": null,
              "_testId": "urn:uuid:91b16a95-70d0-4bad-92d3-d7688a8aa6a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ijlIIiLYJM1e-gTinXfrA",
              "ctx": null,
              "_testId": "urn:uuid:5d5a8e0d-15f6-4da7-af0d-e88632e6c541",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41716,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "bQZrp2ZRbbtazMUVSs0m2",
              "ctx": null,
              "_testId": "urn:uuid:10bc1fdb-1f76-4bad-8cf3-8241113d3481",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42221,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "k-efolQ4r4_gk2vPd9xnt",
              "ctx": null,
              "_testId": "urn:uuid:232b1b0a-b470-4f3f-8160-38e944b52f62",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "qfXKJwX9b6K5CIIXYmSmJ",
              "ctx": null,
              "_testId": "urn:uuid:7bf05e39-4c3f-4a2d-89e0-509e95045600",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "eBwLMYiQev0XPeah4aVOr",
              "ctx": null,
              "_testId": "urn:uuid:e03c1136-af52-46fa-a2cb-2decee3fd441",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40100,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 492,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "YgYw91Q-St2t1J330rW5P",
              "ctx": null,
              "_testId": "urn:uuid:489e545e-b85d-4251-a39e-737e7ea8ac3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40943,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xk-aYgpsHkvdeJI_vBBNf",
              "ctx": null,
              "_testId": "urn:uuid:42fe9f8e-2d9a-43c7-85e1-de097e821a3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "ijlIIiLYJM1e-gTinXfrA",
              "ctx": null,
              "_testId": "urn:uuid:f83438f3-587f-471c-872b-e7c1cb972dab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "bQZrp2ZRbbtazMUVSs0m2",
              "ctx": null,
              "_testId": "urn:uuid:a0efb277-3e25-4c45-bff1-e0f7cd1585d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42321,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "k-efolQ4r4_gk2vPd9xnt",
              "ctx": null,
              "_testId": "urn:uuid:907e4c6a-fc07-4875-b193-8ff8f6f9cb5c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Ed25519Signature2020 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n    const credentials = await generateTestData();\n    validVc = credentials.get('validVc');\n  }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "iyvRvoMWmV9ZMk5-1cQFU",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 43568,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has('Ed25519Signature2020'));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "iyvRvoMWmV9ZMk5-1cQFU",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 43568,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1405,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has('Ed25519Signature2020'));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "iyvRvoMWmV9ZMk5-1cQFU",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 44974,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 782,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has('Ed25519Signature2020'));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "iyvRvoMWmV9ZMk5-1cQFU",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 45755,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 393,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has('Ed25519Signature2020'));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "iyvRvoMWmV9ZMk5-1cQFU",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 46148,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 82,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has('Ed25519Signature2020'));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "iyvRvoMWmV9ZMk5-1cQFU",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 46230,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 314,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has('Ed25519Signature2020'));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "iyvRvoMWmV9ZMk5-1cQFU",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 46544,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 105,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has('Ed25519Signature2020'));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "iyvRvoMWmV9ZMk5-1cQFU",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 46649,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 126,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "OCrY5iw4rggBHzpXYs9pG",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:8c1fbf1b-1027-48ce-b13a-3e648eaca7e7",
      "columns": [
        "apicatalog.com",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "apicatalog.com",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:9fa3c83a-a584-463b-a1f7-cb12c4a81835",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46776,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-12T05:02:05Z\",\"proofValue\":\"zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:02:05Z",
                          "proofValue": "zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:213e5cf1-550c-4fd3-9180-fe01de45f9c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 646,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-12T05:02:05Z\",\"proofValue\":\"zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:02:05Z",
                          "proofValue": "zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:37440ac7-a273-41ea-a4c9-92f2052b0c4c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 349,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:02:05Z",
                          "proofValue": "zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-12T05:02:05Z\",\"proofValue\":\"zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:02:05Z",
                          "proofValue": "zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at Ed25519Signature2020.verifyProof (/home/node/app/node_modules/jsonld-signatures/lib/suites/LinkedDataSignature.js:202:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:268:53\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:256:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419",
                        "error": "Invalid signature.",
                        "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "EWF should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:8fe02f4e-4822-4f5e-821f-6ad3105ecb9e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError { …(7) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-12T05:02:05Z\",\"proofValue\":\"zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:02:05Z",
                          "proofValue": "zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": [
                      "verifiableCredential.type must be an array"
                    ],
                    "error": "Bad Request",
                    "statusCode": 400
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError { …(7) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "LearnCard should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:6e82d7a3-9484-4a40-ab8a-a45f5072170d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47890,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 236,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-12T05:02:05Z\",\"proofValue\":\"zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:02:05Z",
                          "proofValue": "zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": "Invalid input: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"array\",\n    \"received\": \"string\",\n    \"path\": [\n      \"verifiableCredential\",\n      \"type\"\n    ],\n    \"message\": \"Expected array, received string\"\n  }\n]"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:98a466c4-05b1-45b2-89bb-ffdb6d9012f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-12T05:02:05Z\",\"proofValue\":\"zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:02:05Z",
                          "proofValue": "zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:631675ce-9c7a-440b-9f71-d525bd69e119",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-05-12T05:02:05Z\",\"proofValue\":\"zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:5a3746f5-e255-4fc9-9a7f-c52f3f3fd419",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-05-12T05:02:05Z",
                          "proofValue": "zVSKyENR59b4Y7jSCWS2i4zYqwVsUs3DyRey1C91iuT1iqa9S9dVtwsax6KpVqsgkPoDLi4J4FMYWeiMpvGTjxqT"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "Danube Tech",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:417a6d6e-1f5f-4019-a1f1-a582b4d9c203",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48329,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Danube Tech should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:f6a70fbf-8bbf-420c-8318-35263b5042c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48420,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 500,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:df2ba6b7-aef6-4ebf-9912-33e6dc05c343",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48919,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:a7e29885-23a0-49e0-8c76-e602e7d3eb1a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "LearnCard should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:4f6c30a5-430e-42f2-977a-f71d8b4a0a92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:89d61a43-1c3f-47f4-8b77-9f8bbc074d82",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:b1d860c3-748f-4cfe-8d27-86d96799c996",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:7e563905-f733-43ac-92f8-ac8835a3cd3f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Danube Tech should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:d1087e74-50d4-4f4c-980c-96285592f000",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49487,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 489,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:cff1b184-1ab3-40a4-b3e1-7d185bdfe6be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:1e4a911b-94a0-4c36-b6e6-50052cd5cdfd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "LearnCard should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:5ee190ba-37da-40f6-8d13-093b7c8f0050",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50147,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:78383540-200a-4b9a-b057-fbc07d660703",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:31b28252-607b-4534-a81a-33c8e0af921b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "EWF",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:767b747d-6792-4527-9234-0b005a47ac04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50493,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:0b66b5ec-52ee-4cfd-a340-b7ac45d1c55b\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2018\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"created\":\"2024-05-12T05:02:07.590Z\",\"jws\":\"eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..KzpU_-qrMn9SxbBnkElTGdy_2qXeYNSecMzxp4fazNlaA8asWpeD5H0JROPggrSQiNW-lfb_93ZNn0tWSi9ZCg\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:0b66b5ec-52ee-4cfd-a340-b7ac45d1c55b",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2018",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                          "created": "2024-05-12T05:02:07.590Z",
                          "jws": "eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..KzpU_-qrMn9SxbBnkElTGdy_2qXeYNSecMzxp4fazNlaA8asWpeD5H0JROPggrSQiNW-lfb_93ZNn0tWSi9ZCg"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:a421bea0-1e9d-465c-b4ce-789de3adf842",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50574,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 487,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:1254455c-b9e9-434e-86e1-c25e6f061c3d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:56feeac0-b23e-428f-a1a9-692f45d18ac6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51172,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "LearnCard should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:9fc13e84-381e-46e2-9024-6005c2e217a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:4c4a2a1a-7557-4a80-8f26-827033305969",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:6ecf582b-76f7-4aaf-998a-2badfe18895b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51446,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:0b66b5ec-52ee-4cfd-a340-b7ac45d1c55b\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2018\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"created\":\"2024-05-12T05:02:07.590Z\",\"jws\":\"eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..KzpU_-qrMn9SxbBnkElTGdy_2qXeYNSecMzxp4fazNlaA8asWpeD5H0JROPggrSQiNW-lfb_93ZNn0tWSi9ZCg\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:0b66b5ec-52ee-4cfd-a340-b7ac45d1c55b",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2018",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                          "created": "2024-05-12T05:02:07.590Z",
                          "jws": "eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..KzpU_-qrMn9SxbBnkElTGdy_2qXeYNSecMzxp4fazNlaA8asWpeD5H0JROPggrSQiNW-lfb_93ZNn0tWSi9ZCg"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "LearnCard",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:08695b52-2746-4016-a8cc-701770f151e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51539,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Danube Tech should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:2b3cb63f-5369-47e1-9ec3-d95e5f98bf5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51654,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 488,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:c1d4b88b-fe3c-4771-9c4b-2b521307154c\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zgfBULt6G9Dfy8GM6SFPHbjCbqWjf5HDXp72yJdWv2Cw4bYMLmfsm8RPiUwf43nQ87xVUWPK7iBPxi3N6KNgDpzC\",\"verificationMethod\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"created\":\"2024-05-12T05:02:07.878Z\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:c1d4b88b-fe3c-4771-9c4b-2b521307154c",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zgfBULt6G9Dfy8GM6SFPHbjCbqWjf5HDXp72yJdWv2Cw4bYMLmfsm8RPiUwf43nQ87xVUWPK7iBPxi3N6KNgDpzC",
                          "verificationMethod": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                          "created": "2024-05-12T05:02:07.878Z"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "proof"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:6a4c95a6-7733-4a70-a2e6-f3e67c002e7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52143,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:c1d4b88b-fe3c-4771-9c4b-2b521307154c",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zgfBULt6G9Dfy8GM6SFPHbjCbqWjf5HDXp72yJdWv2Cw4bYMLmfsm8RPiUwf43nQ87xVUWPK7iBPxi3N6KNgDpzC",
                          "verificationMethod": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                          "created": "2024-05-12T05:02:07.878Z"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:c1d4b88b-fe3c-4771-9c4b-2b521307154c\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zgfBULt6G9Dfy8GM6SFPHbjCbqWjf5HDXp72yJdWv2Cw4bYMLmfsm8RPiUwf43nQ87xVUWPK7iBPxi3N6KNgDpzC\",\"verificationMethod\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"created\":\"2024-05-12T05:02:07.878Z\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "error": {
                      "name": "TypeError",
                      "message": "Cannot read properties of undefined (reading '0')"
                    },
                    "checks": [
                      {
                        "error": "Cannot read properties of undefined (reading '0')"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "EWF should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:06c14476-6e15-4f0c-aae0-73303122a245",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "LearnCard should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:1c9b953d-8243-467e-9f33-8f865965e34e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52285,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:c150d5bf-4eea-4607-bd30-262c6ad243bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52416,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:e509243f-7c75-4b6e-916c-e27eb5c9714c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52528,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "SpruceID",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:a1276da3-dcf1-42a1-b3bf-a38029823e68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 81,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Danube Tech should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:8c7f210e-535b-4097-916c-56650f04d68f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 481,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:5fe082ca-8c0b-4c11-80ec-2cbc28968a31\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2G8eFKsMYtRejqTQRKjnoqJEZsQxVJMizYhEf6NZLBDcqqYvqyjU1wVYfHTZVhtRwyFGWLBePyz8DyQfY7oDnfYf\",\"verificationMethod\":\"did:key:z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra#z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra\",\"created\":\"2024-05-12T05:02:07.978Z\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:5fe082ca-8c0b-4c11-80ec-2cbc28968a31",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2G8eFKsMYtRejqTQRKjnoqJEZsQxVJMizYhEf6NZLBDcqqYvqyjU1wVYfHTZVhtRwyFGWLBePyz8DyQfY7oDnfYf",
                          "verificationMethod": "did:key:z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra#z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra",
                          "created": "2024-05-12T05:02:07.978Z"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "proof"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:5fac4822-81e8-485e-8e52-9f69b5372ed2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:5fe082ca-8c0b-4c11-80ec-2cbc28968a31",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2G8eFKsMYtRejqTQRKjnoqJEZsQxVJMizYhEf6NZLBDcqqYvqyjU1wVYfHTZVhtRwyFGWLBePyz8DyQfY7oDnfYf",
                          "verificationMethod": "did:key:z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra#z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra",
                          "created": "2024-05-12T05:02:07.978Z"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:5fe082ca-8c0b-4c11-80ec-2cbc28968a31\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2G8eFKsMYtRejqTQRKjnoqJEZsQxVJMizYhEf6NZLBDcqqYvqyjU1wVYfHTZVhtRwyFGWLBePyz8DyQfY7oDnfYf\",\"verificationMethod\":\"did:key:z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra#z6MkgND5U5Kedizov5nxeh2ZCVUTDRSmAfbNqPhzCq8b72Ra\",\"created\":\"2024-05-12T05:02:07.978Z\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19rSJA9yQQwEqSSoNDjzkuNJ/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "error": {
                      "name": "TypeError",
                      "message": "Cannot read properties of undefined (reading '0')"
                    },
                    "checks": [
                      {
                        "error": "Cannot read properties of undefined (reading '0')"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "EWF should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:e6b548a5-2e39-4cab-9531-36223f342f9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "LearnCard should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:3af15404-3042-4ab4-bd32-f8653cdf1737",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 128,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:e5ead3b8-9f2b-4e76-b4a0-4459f6e66d40",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53466,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:2ae2f798-d8db-4b2d-ae7b-a7b0e2045726",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53666,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Trinsic",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:06cfdd8a-b1b8-4eef-9add-d298c931da04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53775,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Danube Tech should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:7010816a-5198-4484-a0c7-e44f34c8dde3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53863,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 495,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:aeafbc6a-20c8-434e-ace8-46e3aa49014a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54359,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:22832d12-ab3b-4d93-a548-b8d819739331",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:e8315ed6-7230-4a6d-8baa-8dd4f9c204c2\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-05-12T05:02:08.1023933Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"proofValue\":\"z27oztwY4TpLo1dK9pvD1vNGCWeuFNhx67UWPUfEPCCyrDFTgkmpaWizXYEGfXuJXAJMhCVmT2ekAsFCDX7A1Aza4\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:e8315ed6-7230-4a6d-8baa-8dd4f9c204c2",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-05-12T05:02:08.1023933Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "proofValue": "z27oztwY4TpLo1dK9pvD1vNGCWeuFNhx67UWPUfEPCCyrDFTgkmpaWizXYEGfXuJXAJMhCVmT2ekAsFCDX7A1Aza4"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "proof"
                    ],
                    "warnings": [],
                    "errors": [
                      "signature error: Verification equation was not satisfied"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "LearnCard should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:b35b4421-c233-4c8f-b4bf-176f1d972fe6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54504,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:e8315ed6-7230-4a6d-8baa-8dd4f9c204c2\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-05-12T05:02:08.1023933Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"proofValue\":\"z27oztwY4TpLo1dK9pvD1vNGCWeuFNhx67UWPUfEPCCyrDFTgkmpaWizXYEGfXuJXAJMhCVmT2ekAsFCDX7A1Aza4\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:e8315ed6-7230-4a6d-8baa-8dd4f9c204c2",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-05-12T05:02:08.1023933Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "proofValue": "z27oztwY4TpLo1dK9pvD1vNGCWeuFNhx67UWPUfEPCCyrDFTgkmpaWizXYEGfXuJXAJMhCVmT2ekAsFCDX7A1Aza4"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "proof",
                      "expiration"
                    ],
                    "warnings": [],
                    "errors": [
                      "signature error: Verification equation was not satisfied"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:b4f1b7d6-3cd1-4866-b006-740c13a80e97",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54649,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:e8315ed6-7230-4a6d-8baa-8dd4f9c204c2\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-05-12T05:02:08.1023933Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"proofValue\":\"z27oztwY4TpLo1dK9pvD1vNGCWeuFNhx67UWPUfEPCCyrDFTgkmpaWizXYEGfXuJXAJMhCVmT2ekAsFCDX7A1Aza4\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:e8315ed6-7230-4a6d-8baa-8dd4f9c204c2",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-05-12T05:02:08.1023933Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "proofValue": "z27oztwY4TpLo1dK9pvD1vNGCWeuFNhx67UWPUfEPCCyrDFTgkmpaWizXYEGfXuJXAJMhCVmT2ekAsFCDX7A1Aza4"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:65:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "iyvRvoMWmV9ZMk5-1cQFU",
              "ctx": null,
              "_testId": "urn:uuid:d6b955e1-bd8a-4d4c-a339-3768cd5d5941",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54748,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "di-ed25519signature2020-test-suite",
    "subtitle": "Interoperability Report for Ed25519",
    "github": "https://github.com/w3c/vc-di-ed25519signature2020-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-ed25519signature2020-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ]
  },
  "title": "Ed25519Signature 2020 Interoperability Report 1.0",
  "stats": [
    "Tests passed 269/294 91%",
    "Tests failed 25/294 9%",
    "Failures 25",
    "Tests skipped 0",
    "Total tests 294"
  ]
}