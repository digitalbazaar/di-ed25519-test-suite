{
  "matrices": [
    {
      "title": "Data Integrity (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js"
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"When expressing a data integrity proof on an object, a proof property MUST be used.\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BA8b7eLyjECACrYiDWitt",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2136,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 454,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:bf046662-2834-4a37-9534-3f369f9fcbd9\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:bf046662-2834-4a37-9534-3f369f9fcbd9",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "Ed25519Signature2020"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                "status": 500
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "-Y-ImYakfEgLRVbX-1W_z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:c9d72fff-6193-4a47-813c-4fc6d5ed0c36"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:1829f4c0-308f-4d68-a032-58267cb4cdee",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:d4bf9547-0e18-4488-a083-5ab179ee6206",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:7032643c-3a97-44fd-9ce0-34d322a13a16",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:3e1c57ea-bc12-486e-95ba-72da8e470659",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:35a7d32b-152d-4605-b215-2ccbb61ee448",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:91331f36-e8c9-46a5-9e24-04b5a2ba0572",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:90211a46-e9dc-4988-ac77-59c12cc52003",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:7f4984f5-38c1-47a7-b7fc-db2ccfe072da",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:848d3069-8393-4615-a28b-c5e96a576601",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7429,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:dca62d51-9be9-49c5-9b8f-138885713bcd",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:203074fd-bd32-40cb-8465-98dcedf84d3d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:85e22a56-0a1e-4e82-8a07-2d63e6af6120",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 161,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': '2ff88f58cf54eb37d17c1818e817aac3', date: 'Sun, 17 Nov 2024 05:01:37 GMT', server: 'Google Frontend', 'content-length': '744', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': '2ff88f58cf54eb37d17c1818e817aac3', date: 'Sun, 17 Nov 2024 05:01:37 GMT', server: 'Google Frontend', 'content-length': '744', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:0e9815c0-9e32-40a1-8bdb-2ff087d2bba4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4828,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "-Y-ImYakfEgLRVbX-1W_z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:fd329b78-a73c-4b2c-9629-cf2c6f537e5a"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:67faa6c9-7087-4a48-a6bb-d9ee0fdc2f8e",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:73da878d-ba4e-4a85-81fb-cd4d2d63fb35",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:e5d897ae-01ff-4d1d-8793-023555f4add9",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:a45661e9-b3ee-47ca-af9e-e19ef8ed1fe4",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:5a34b2e0-18bf-46a1-91da-4e6b68852ab6",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:131:34)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:c6ea56b0-e3fb-41f8-98c2-0eab2560c87a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:39e3827a-a479-4485-8ddf-11a2fd091e7b",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:9b708fba-63c5-47b5-af85-55cdfcc65141",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:08dbe05d-44dc-4a15-8460-31b828a7cc2d",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9102,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:b5af3cc5-74ee-4193-8b53-5e3a29ff1da0",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:9dca6b89-c1c8-4ad4-84e7-9806e48b9311",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:229dc21b-8caf-4a90-99a1-aec6c59a09ac",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 357,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:b1353bf5-a379-46ab-bcdc-494b8440ea5f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9461,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Aviary Tech\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1402,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "-Y-ImYakfEgLRVbX-1W_z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:39a27eaa-7e03-40df-84d9-121e72c43de3"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:dd6b812f-8221-47b8-907c-76530ae5111b",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:61e749c2-e7b6-45b2-bdfe-1d436e49d5ef",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:2f54fff6-b305-441e-8c4c-c8961a47eeb2",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:a1995d64-9243-45cb-b3c1-069c97bef671",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10432,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:32734eea-3868-425a-9144-9e5a9c266012",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:d5b03b4b-c8c2-40c6-8d4b-04aff6afe1ad",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:24a6e6b4-b4da-4b2c-9398-0f4cc1d64ca3",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:c291d71d-ccf5-47fb-a296-4af39c7ebd08",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:309c9abe-b09e-4f51-8e72-1b3a619ba348",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:a991cf83-b54b-41bf-991e-69c90f0b2113",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:9701fe14-a706-40d7-bed9-4d2bd16a68d1",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:3df47e46-eb61-4eea-81b5-1278c33079c4",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 865,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:a2a8ed8f-6696-49f6-b4f3-22cf0164874d",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Danube Tech\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Danube Tech\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9522,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 909,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "-Y-ImYakfEgLRVbX-1W_z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:0ff2c12e-8d70-4d7a-b0c7-6440013a5537"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:c1b45a3b-3ce1-4775-a056-0f6a6fbcb5a4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:50a3c392-f11d-4e8d-bb58-61deb2a90786",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:1f9cbef0-66c8-4b6b-b815-b28560a89915",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:195e13dc-3114-49f9-959c-02d8b5dc8540",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12528,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:ad540c32-0417-462b-b409-06dd0ac54525",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:86458a6b-02cc-4478-a6f4-d9ce723ec50d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:97c21404-321b-4afd-aaba-b3ebe03d6391",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:8c353710-ff0d-4884-9ec5-3064168d0b24",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12530,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:ceffe40d-dfef-4819-ba3a-aab3eb49f83d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:c01151d6-6acc-49b5-b6a3-72331089bc1e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:f6ebf041-e93c-4c14-aa6c-623c3ec34482",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:b7cdfce4-8b81-407a-9ac4-33b9d3d1914b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 215,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:6839f777-b5bc-4570-a797-4f26fe2f1912",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 527,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11482,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1045,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "-Y-ImYakfEgLRVbX-1W_z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:0be8d727-82e6-4ddd-ae42-84daad5460a2"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:8dbb5f71-8f48-41e9-bc0e-c0b19ead201e",
              "cell": {
                "columnId": "EWF",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:f2e6d21e-6c80-42f3-873d-4d009de1b08f",
              "cell": {
                "columnId": "EWF",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:c0342f6c-fb1e-4d9d-9f98-38423c4cfef3",
              "cell": {
                "columnId": "EWF",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:ddef329a-71ce-4971-b591-238676811675",
              "cell": {
                "columnId": "EWF",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:2ed3a41b-adea-4196-bac2-13e9000c6014",
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:131:34)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:3ffee8ec-8f28-4cd1-aeb3-d4645655fc8c",
              "cell": {
                "columnId": "EWF",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:cfeb5393-de4c-46d9-a2f9-1edd4fc3868f",
              "cell": {
                "columnId": "EWF",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:a6514964-b52e-4e69-8bd8-6416437c5ee5",
              "cell": {
                "columnId": "EWF",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13546,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:6e60fcde-ee0d-4148-8ac9-e39465d4a523",
              "cell": {
                "columnId": "EWF",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:1bcff01e-4f69-4256-a828-a20ad7451ca9",
              "cell": {
                "columnId": "EWF",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected proofValue to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected proofValue to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldHaveProofValue (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:294:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:216:9)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:d5fbcc70-d740-4db5-9ff4-0f02bc56fcbe",
              "cell": {
                "columnId": "EWF",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldBeProof (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:240:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:224:9)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:b1db877b-35d4-465a-9a5f-6d5796e400f7",
              "cell": {
                "columnId": "EWF",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:43 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '742', connection: 'keep-alive', 'x-powered-by': 'Express', vary: 'Origin', etag: 'W/\"2e6-wMUJ7k5n9X4qcyDQBS0GznVXJ0s\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:43 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '742', connection: 'keep-alive', 'x-powered-by': 'Express', vary: 'Origin', etag: 'W/\"2e6-wMUJ7k5n9X4qcyDQBS0GznVXJ0s\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:24c2d964-4b2e-44f9-a5ca-e5a37881cecd",
              "cell": {
                "columnId": "EWF",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13632,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"EWF\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"EWF\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 267,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "-Y-ImYakfEgLRVbX-1W_z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:72f38189-ae56-4e87-8b63-ccd9e5fda30e"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:709f5314-9216-447e-9154-ba6f20d9a896",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:d58889b4-5d06-48cf-a7b0-8036afbfe58b",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:e86c595a-1188-4275-84f7-6504e334eb06",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:a12ab644-a44a-4ca6-b91e-f6cf00e9d3fa",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "code": "ERR_INVALID_URL",
                  "input": "Ed25519Signature2020"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldBeUrl (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:198:14)\n    at file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:30\n    at Array.every (<anonymous>)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:17)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:55ebeb6e-4263-407d-bcb3-c83f7d094ab6",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:138:39)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:368579e2-ae7a-4088-92d4-bc0283880da1",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:c7137aa9-2043-4d85-8bdd-c974ac482830",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:e13bb92d-1b2c-4f2e-8a9f-76f23671ce02",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:d323745f-7fc8-49c8-afd9-e77c125ccfb6",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:61222ef2-324e-4ced-b604-f7b5755e22ce",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:a9f86fdd-fb70-4df7-8ac3-ecba66595d2e",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14079,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:bbf411ae-d003-457b-ac13-7c47390b79eb",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14080,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 176,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:44 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '758', connection: 'keep-alive', etag: 'W/\"2f6-Ox92cpnG9ifslP//EhDeDMvbGVU\"', 'x-powered-by': 'Express', 'apigw-requestid': 'BX_M3jeyoAMEJ9Q=', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:44 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '758', connection: 'keep-alive', etag: 'W/\"2f6-Ox92cpnG9ifslP//EhDeDMvbGVU\"', 'x-powered-by': 'Express', 'apigw-requestid': 'BX_M3jeyoAMEJ9Q=', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:00ebc5cc-54d6-41ed-a952-fe27e2e2055f",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14257,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"LearnCard\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"LearnCard\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 394,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "-Y-ImYakfEgLRVbX-1W_z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:b1c47c37-1073-4410-b5d7-03217d90f4f6"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:e2fdb3ee-bb79-498b-a2b1-7dff7d7a5013",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:1e3cb08a-b5bb-47df-ac07-db81d7ebe3b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:45e95840-1533-4e47-b5b5-36362234d9c6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:d8419a11-0f32-4350-a2a2-e4aae3f50c65",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:9567038c-aedc-4d73-baf7-ec975880c1ef",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:a3598bba-419d-4333-96a1-2154ad4e668a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:68f433b6-50d9-4fa2-aec5-865ec068f017",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:6ac4fc1b-d0b4-47fd-a3a0-5d932bdd6832",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:961c4f3c-0aa3-4243-b14a-d79cc68264d4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:21453129-864c-4f84-9aae-e13387edddf4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:130a6a99-8bd7-4d60-83c8-e21d374b634a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:a2c060bd-216f-4ff0-b384-9d08394a5874",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 463,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:ce383be0-d376-4c94-a50c-e0ebc73ec7f7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 358,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "-Y-ImYakfEgLRVbX-1W_z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:a2005c45-694e-4335-8ce9-59e7fd1f3a71"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:ff6caf1f-97bd-45d3-b331-b212f144b08c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:99697606-b393-45db-b3d6-0cbeb80326b9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:e8ba83f9-3db7-490d-a05b-c04098758c65",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:47b09569-4bfa-4a65-a202-f325f1dcdc18",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15963,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:57485aef-312d-4c65-89dd-b60e7a9c4ca0",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:76e72c6a-626d-4525-ac61-889d00838eef",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:aa0465b5-5b1d-4a9f-85f5-62727467bf6a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:f924b109-1f24-4c4d-8673-08721aad54a9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15965,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:40d2021a-63d5-42cd-8dcd-7c28c6b7e637",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:93a6d07c-c741-4200-b5dd-d4dc8b639598",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:fcedfaaf-cf19-4975-b786-f6ecddf5566e",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:97bbecb3-572e-4ece-8425-4c181fa58193",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:46 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '88', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=T0s6%2BVfb%2BXf5KRShGk3Gyfolw4%2BB69WI8vMFOzc8rbkpj7qDZVPeRz4a%2BeK2BFgK0EgIwwh%2FIUi3fQP8e2r%2BJfIS3uvNc954BvAC3YTbf0GW66kVNqy39ekmVfy%2F28JQ0mSzdrJOqmMNIpluPnk%2F\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8e3d2a2b7ff36802-SJC', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=1341&sent=9&recv=7&lost=0&retrans=0&sent_bytes=4563&recv_bytes=1926&delivery_rate=3893660&cwnd=252&unsent_bytes=0&cid=61dbd3fc739993e2&ts=814&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:46 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '88', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=T0s6%2BVfb%2BXf5KRShGk3Gyfolw4%2BB69WI8vMFOzc8rbkpj7qDZVPeRz4a%2BeK2BFgK0EgIwwh%2FIUi3fQP8e2r%2BJfIS3uvNc954BvAC3YTbf0GW66kVNqy39ekmVfy%2F28JQ0mSzdrJOqmMNIpluPnk%2F\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8e3d2a2b7ff36802-SJC', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=1341&sent=9&recv=7&lost=0&retrans=0&sent_bytes=4563&recv_bytes=1926&delivery_rate=3893660&cwnd=252&unsent_bytes=0&cid=61dbd3fc739993e2&ts=814&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:7736522c-8fc7-4358-add0-d85482aaeb93",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16144,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trinsic\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 671,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "-Y-ImYakfEgLRVbX-1W_z",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:d6956fe5-0044-4b1d-b4ee-dd79bdcf4b8f"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "xisEH67X-H6o3K8_fEplJ",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:68adc818-81af-437d-8097-07e83b885393",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Aviary Tech",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "When expressing a data integrity proof on an object, a proof property MUST be used.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
          "cells": [
            {
              "cell": {
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:1829f4c0-308f-4d68-a032-58267cb4cdee",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:67faa6c9-7087-4a48-a6bb-d9ee0fdc2f8e",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:dd6b812f-8221-47b8-907c-76530ae5111b",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:c1b45a3b-3ce1-4775-a056-0f6a6fbcb5a4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:8dbb5f71-8f48-41e9-bc0e-c0b19ead201e",
              "cell": {
                "columnId": "EWF",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:709f5314-9216-447e-9154-ba6f20d9a896",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:e2fdb3ee-bb79-498b-a2b1-7dff7d7a5013",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:ff6caf1f-97bd-45d3-b331-b212f144b08c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
          "cells": [
            {
              "cell": {
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:d4bf9547-0e18-4488-a083-5ab179ee6206",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:73da878d-ba4e-4a85-81fb-cd4d2d63fb35",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:61e749c2-e7b6-45b2-bdfe-1d436e49d5ef",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:50a3c392-f11d-4e8d-bb58-61deb2a90786",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:f2e6d21e-6c80-42f3-873d-4d009de1b08f",
              "cell": {
                "columnId": "EWF",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:d58889b4-5d06-48cf-a7b0-8036afbfe58b",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:1e3cb08a-b5bb-47df-ac07-db81d7ebe3b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:99697606-b393-45db-b3d6-0cbeb80326b9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
          "cells": [
            {
              "cell": {
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:7032643c-3a97-44fd-9ce0-34d322a13a16",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:e5d897ae-01ff-4d1d-8793-023555f4add9",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:2f54fff6-b305-441e-8c4c-c8961a47eeb2",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:1f9cbef0-66c8-4b6b-b815-b28560a89915",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:c0342f6c-fb1e-4d9d-9f98-38423c4cfef3",
              "cell": {
                "columnId": "EWF",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:e86c595a-1188-4275-84f7-6504e334eb06",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:45e95840-1533-4e47-b5b5-36362234d9c6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:e8ba83f9-3db7-490d-a05b-c04098758c65",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The specific type of proof MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "cell": {
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:3e1c57ea-bc12-486e-95ba-72da8e470659",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:a45661e9-b3ee-47ca-af9e-e19ef8ed1fe4",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9097,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:a1995d64-9243-45cb-b3c1-069c97bef671",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10432,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:195e13dc-3114-49f9-959c-02d8b5dc8540",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12528,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:ddef329a-71ce-4971-b591-238676811675",
              "cell": {
                "columnId": "EWF",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:a12ab644-a44a-4ca6-b91e-f6cf00e9d3fa",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14075,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "code": "ERR_INVALID_URL",
                  "input": "Ed25519Signature2020"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldBeUrl (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:198:14)\n    at file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:30\n    at Array.every (<anonymous>)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:17)"
              }
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:d8419a11-0f32-4350-a2a2-e4aae3f50c65",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:47b09569-4bfa-4a65-a202-f325f1dcdc18",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15963,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "cell": {
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:35a7d32b-152d-4605-b215-2ccbb61ee448",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:5a34b2e0-18bf-46a1-91da-4e6b68852ab6",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:131:34)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:32734eea-3868-425a-9144-9e5a9c266012",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:ad540c32-0417-462b-b409-06dd0ac54525",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:2ed3a41b-adea-4196-bac2-13e9000c6014",
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:131:34)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:55ebeb6e-4263-407d-bcb3-c83f7d094ab6",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:138:39)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:9567038c-aedc-4d73-baf7-ec975880c1ef",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts.",
              "body": "function() {\n        for(const proof of proofs) {\n          proof.should.have.property('type');\n          proof.type.should.be.a(\n            'string',\n            'Expected \"proof.type\" to be a string.'\n          );\n          const hasExpectedType = expectedProofTypes.includes(proof.type);\n          hasExpectedType.should.equal(true);\n\n          if(proof.type === 'Ed25519Signature2020') {\n            const expectedContext =\n              'https://w3id.org/security/suites/ed25519-2020/v1';\n            const hasExpectedContext =\n              data['@context'].includes(expectedContext);\n            hasExpectedContext.should.equal(true);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:57485aef-312d-4c65-89dd-b60e7a9c4ca0",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof.type\" field MUST be \"Ed25519Signature2020\" and the associated document MUST include expected contexts."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:91331f36-e8c9-46a5-9e24-04b5a2ba0572",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:c6ea56b0-e3fb-41f8-98c2-0eab2560c87a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:d5b03b4b-c8c2-40c6-8d4b-04aff6afe1ad",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:86458a6b-02cc-4478-a6f4-d9ce723ec50d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:3ffee8ec-8f28-4cd1-aeb3-d4645655fc8c",
              "cell": {
                "columnId": "EWF",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:368579e2-ae7a-4088-92d4-bc0283880da1",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:a3598bba-419d-4333-96a1-2154ad4e668a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:76e72c6a-626d-4525-ac61-889d00838eef",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If specified (proof.cryptosuite), its value MUST be a string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:90211a46-e9dc-4988-ac77-59c12cc52003",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:39e3827a-a479-4485-8ddf-11a2fd091e7b",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:24a6e6b4-b4da-4b2c-9398-0f4cc1d64ca3",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:97c21404-321b-4afd-aaba-b3ebe03d6391",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:cfeb5393-de4c-46d9-a2f9-1edd4fc3868f",
              "cell": {
                "columnId": "EWF",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:c7137aa9-2043-4d85-8bdd-c974ac482830",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:68f433b6-50d9-4fa2-aec5-865ec068f017",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:aa0465b5-5b1d-4a9f-85f5-62727467bf6a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
          "cells": [
            {
              "cell": {
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:7f4984f5-38c1-47a7-b7fc-db2ccfe072da",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7428,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:9b708fba-63c5-47b5-af85-55cdfcc65141",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:c291d71d-ccf5-47fb-a296-4af39c7ebd08",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:8c353710-ff0d-4884-9ec5-3064168d0b24",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12530,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:a6514964-b52e-4e69-8bd8-6416437c5ee5",
              "cell": {
                "columnId": "EWF",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13546,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:e13bb92d-1b2c-4f2e-8a9f-76f23671ce02",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:6ac4fc1b-d0b4-47fd-a3a0-5d932bdd6832",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:f924b109-1f24-4c4d-8673-08721aad54a9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15965,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "cell": {
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:848d3069-8393-4615-a28b-c5e96a576601",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7429,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:08dbe05d-44dc-4a15-8460-31b828a7cc2d",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9102,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:309c9abe-b09e-4f51-8e72-1b3a619ba348",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:ceffe40d-dfef-4819-ba3a-aab3eb49f83d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:6e60fcde-ee0d-4148-8ac9-e39465d4a523",
              "cell": {
                "columnId": "EWF",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:d323745f-7fc8-49c8-afd9-e77c125ccfb6",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14078,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:961c4f3c-0aa3-4243-b14a-d79cc68264d4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14735,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:40d2021a-63d5-42cd-8dcd-7c28c6b7e637",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
          "cells": [
            {
              "cell": {
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:dca62d51-9be9-49c5-9b8f-138885713bcd",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:b5af3cc5-74ee-4193-8b53-5e3a29ff1da0",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:a991cf83-b54b-41bf-991e-69c90f0b2113",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:c01151d6-6acc-49b5-b6a3-72331089bc1e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:1bcff01e-4f69-4256-a828-a20ad7451ca9",
              "cell": {
                "columnId": "EWF",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected proofValue to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected proofValue to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldHaveProofValue (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:294:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:216:9)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:61222ef2-324e-4ced-b604-f7b5755e22ce",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:21453129-864c-4f84-9aae-e13387edddf4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:93a6d07c-c741-4200-b5dd-d4dc8b639598",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
          "cells": [
            {
              "cell": {
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:203074fd-bd32-40cb-8465-98dcedf84d3d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7430,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:9dca6b89-c1c8-4ad4-84e7-9806e48b9311",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:9701fe14-a706-40d7-bed9-4d2bd16a68d1",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:f6ebf041-e93c-4c14-aa6c-623c3ec34482",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:d5fbcc70-d740-4db5-9ff4-0f02bc56fcbe",
              "cell": {
                "columnId": "EWF",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldBeProof (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:240:10)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:224:9)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:a9f86fdd-fb70-4df7-8ac3-ecba66595d2e",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14079,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:130a6a99-8bd7-4d60-83c8-e21d374b634a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:fcedfaaf-cf19-4975-b786-f6ecddf5566e",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "cell": {
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:85e22a56-0a1e-4e82-8a07-2d63e6af6120",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7431,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 161,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': '2ff88f58cf54eb37d17c1818e817aac3', date: 'Sun, 17 Nov 2024 05:01:37 GMT', server: 'Google Frontend', 'content-length': '744', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': '2ff88f58cf54eb37d17c1818e817aac3', date: 'Sun, 17 Nov 2024 05:01:37 GMT', server: 'Google Frontend', 'content-length': '744', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:229dc21b-8caf-4a90-99a1-aec6c59a09ac",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 357,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:3df47e46-eb61-4eea-81b5-1278c33079c4",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 865,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:b7cdfce4-8b81-407a-9ac4-33b9d3d1914b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 215,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:b1db877b-35d4-465a-9a5f-6d5796e400f7",
              "cell": {
                "columnId": "EWF",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:43 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '742', connection: 'keep-alive', 'x-powered-by': 'Express', vary: 'Origin', etag: 'W/\"2e6-wMUJ7k5n9X4qcyDQBS0GznVXJ0s\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:43 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '742', connection: 'keep-alive', 'x-powered-by': 'Express', vary: 'Origin', etag: 'W/\"2e6-wMUJ7k5n9X4qcyDQBS0GznVXJ0s\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:bbf411ae-d003-457b-ac13-7c47390b79eb",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14080,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 176,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:44 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '758', connection: 'keep-alive', etag: 'W/\"2f6-Ox92cpnG9ifslP//EhDeDMvbGVU\"', 'x-powered-by': 'Express', 'apigw-requestid': 'BX_M3jeyoAMEJ9Q=', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:44 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '758', connection: 'keep-alive', etag: 'W/\"2f6-Ox92cpnG9ifslP//EhDeDMvbGVU\"', 'x-powered-by': 'Express', 'apigw-requestid': 'BX_M3jeyoAMEJ9Q=', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:a2c060bd-216f-4ff0-b384-9d08394a5874",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 463,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:97bbecb3-572e-4ece-8425-4c181fa58193",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:46 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '88', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=T0s6%2BVfb%2BXf5KRShGk3Gyfolw4%2BB69WI8vMFOzc8rbkpj7qDZVPeRz4a%2BeK2BFgK0EgIwwh%2FIUi3fQP8e2r%2BJfIS3uvNc954BvAC3YTbf0GW66kVNqy39ekmVfy%2F28JQ0mSzdrJOqmMNIpluPnk%2F\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8e3d2a2b7ff36802-SJC', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=1341&sent=9&recv=7&lost=0&retrans=0&sent_bytes=4563&recv_bytes=1926&delivery_rate=3893660&cwnd=252&unsent_bytes=0&cid=61dbd3fc739993e2&ts=814&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 17 Nov 2024 05:01:46 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '88', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=T0s6%2BVfb%2BXf5KRShGk3Gyfolw4%2BB69WI8vMFOzc8rbkpj7qDZVPeRz4a%2BeK2BFgK0EgIwwh%2FIUi3fQP8e2r%2BJfIS3uvNc954BvAC3YTbf0GW66kVNqy39ekmVfy%2F28JQ0mSzdrJOqmMNIpluPnk%2F\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8e3d2a2b7ff36802-SJC', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=1341&sent=9&recv=7&lost=0&retrans=0&sent_bytes=4563&recv_bytes=1926&delivery_rate=3893660&cwnd=252&unsent_bytes=0&cid=61dbd3fc739993e2&ts=814&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            }
          ]
        },
        {
          "id": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
          "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
          "cells": [
            {
              "cell": {
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1jIvj53uPZ0zcIiKp-1c9",
              "ctx": null,
              "_testId": "urn:uuid:0e9815c0-9e32-40a1-8bdb-2ff087d2bba4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "1sn33pMVKvVSBcPgouDlA",
              "ctx": null,
              "_testId": "urn:uuid:b1353bf5-a379-46ab-bcdc-494b8440ea5f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9461,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "4lhh0u3Zf_8NH1OzkJnfJ",
              "ctx": null,
              "_testId": "urn:uuid:a2a8ed8f-6696-49f6-b4f3-22cf0164874d",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "76Nird-vfbfdjfRdXJMiU",
              "ctx": null,
              "_testId": "urn:uuid:6839f777-b5bc-4570-a797-4f26fe2f1912",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 527,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mvoLR_CD-UFVdVVEFY80j",
              "ctx": null,
              "_testId": "urn:uuid:24c2d964-4b2e-44f9-a5ca-e5a37881cecd",
              "cell": {
                "columnId": "EWF",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13632,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "32ZkfFZzOLgOHFuXp6Om4",
              "ctx": null,
              "_testId": "urn:uuid:00ebc5cc-54d6-41ed-a952-fe27e2e2055f",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14257,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Q_ZxyiskO2XspYnErVeQS",
              "ctx": null,
              "_testId": "urn:uuid:ce383be0-d376-4c94-a50c-e0ebc73ec7f7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "5uHCOghXRiVnhLx7TRgwd",
              "ctx": null,
              "_testId": "urn:uuid:7736522c-8fc7-4358-add0-d85482aaeb93",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16144,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Ed25519Signature2020 (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "KdrJzhm18GwGCrRo8SPDe",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "KdrJzhm18GwGCrRo8SPDe",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has(tag));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KdrJzhm18GwGCrRo8SPDe",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16233,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 328,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "credentials": "same-origin",
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:2bbdbb57-371a-40d1-ac34-b6927613d2bc\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:2bbdbb57-371a-40d1-ac34-b6927613d2bc",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "Ed25519Signature2020"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "beforeError": [],
                    "afterResponse": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                "status": 500
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "n5ScMHQgk00Cps9IpOc4I",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:25cf292e-bdd1-4fdb-accc-d98c57b62227"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Doy2X6Ia2NjZhnty9II0B",
              "ctx": null,
              "_testId": "urn:uuid:775d0ace-a8f6-4e67-bbae-6df4ea444266",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Doy2X6Ia2NjZhnty9II0B",
              "ctx": null,
              "_testId": "urn:uuid:bf523517-f0d5-496d-a752-c38a49adff59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:e8fb8ae9-ba9b-4fb4-9897-2839a3a844f3\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:01:46Z\",\"proofValue\":\"z2eeKQHB4YuNf6m32DhCwuoMeRdzvEvfHppYWsXy9t6x7UiJ7eKrfSsAT1JcPsfYppyCvkLg7gMinC4kqJ7X8DNmJ\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:e8fb8ae9-ba9b-4fb4-9897-2839a3a844f3",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:01:46Z",
                          "proofValue": "z2eeKQHB4YuNf6m32DhCwuoMeRdzvEvfHppYWsXy9t6x7UiJ7eKrfSsAT1JcPsfYppyCvkLg7gMinC4kqJ7X8DNmJ"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:105:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has(tag));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Doy2X6Ia2NjZhnty9II0B",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "n5ScMHQgk00Cps9IpOc4I",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:cd7df96a-f63c-4583-8f2a-90d960872cd0"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "PE6rxszHe6gHKesWWwB9n",
              "ctx": null,
              "_testId": "urn:uuid:fc40bae8-3776-47bb-89a2-cd172590ca8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one Ed25519 proof.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one Ed25519 proof.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:73:42)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "PE6rxszHe6gHKesWWwB9n",
              "ctx": null,
              "_testId": "urn:uuid:42c33180-b8f6-4a1e-bfdf-f3a9d1d756d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17176,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has(tag));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PE6rxszHe6gHKesWWwB9n",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 292,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "n5ScMHQgk00Cps9IpOc4I",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:715f4037-e237-4223-b5f2-7a3d832e7a04"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "rVA7X98Qv2en3BqtSI28A",
              "ctx": null,
              "_testId": "urn:uuid:ec0750df-7416-49c8-ab40-9dae7cbd85cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17915,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "rVA7X98Qv2en3BqtSI28A",
              "ctx": null,
              "_testId": "urn:uuid:2c7172e2-d07e-445a-a825-a6b26e315fd7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17918,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1332,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Danube Tech\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has(tag));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "rVA7X98Qv2en3BqtSI28A",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 676,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "n5ScMHQgk00Cps9IpOc4I",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:2acf7775-36fa-44b8-9acf-f6cb349d41c5"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "cophLXhTWrvA78Yp41Fja",
              "ctx": null,
              "_testId": "urn:uuid:f1830a7f-37bb-40b3-b788-000ee1d069df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "cophLXhTWrvA78Yp41Fja",
              "ctx": null,
              "_testId": "urn:uuid:dfb683f4-902f-44a1-8318-597b9a320283",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 784,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has(tag));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "cophLXhTWrvA78Yp41Fja",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19251,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 433,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "n5ScMHQgk00Cps9IpOc4I",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:1132d6c4-d16a-47ec-b6b2-803abcecafc5"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "sJ1HOnxURcW25RkjtftXK",
              "ctx": null,
              "_testId": "urn:uuid:8fe17252-cab1-4fbc-86b2-93c54863d4af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20588,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one Ed25519 proof.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one Ed25519 proof.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:73:42)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "sJ1HOnxURcW25RkjtftXK",
              "ctx": null,
              "_testId": "urn:uuid:97d91683-e911-4046-a26e-0777fc9a4e8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"EWF\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has(tag));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "sJ1HOnxURcW25RkjtftXK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20469,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "n5ScMHQgk00Cps9IpOc4I",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:4d7dc432-d68c-4e95-836f-bde2880bd72d"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "OdL82pdw0x3NguFjeU3FE",
              "ctx": null,
              "_testId": "urn:uuid:f926b21a-8fc4-477d-95ff-5dd3565ca0a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "OdL82pdw0x3NguFjeU3FE",
              "ctx": null,
              "_testId": "urn:uuid:c8351f6e-c6f3-42c6-a473-6d47e503d625",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"LearnCard\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has(tag));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OdL82pdw0x3NguFjeU3FE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20622,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 337,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "n5ScMHQgk00Cps9IpOc4I",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:9befd507-eb80-4545-b624-d06007db1fef"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "da8W8YcIt2ccCt8yjsVWt",
              "ctx": null,
              "_testId": "urn:uuid:0eb4459d-28d5-4978-ad58-8bdefd51e914",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21482,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "da8W8YcIt2ccCt8yjsVWt",
              "ctx": null,
              "_testId": "urn:uuid:ddf289dd-bde8-4c01-9255-08802b5bdfb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21483,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has(tag));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "da8W8YcIt2ccCt8yjsVWt",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21124,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 358,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "n5ScMHQgk00Cps9IpOc4I",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:43166aa0-b893-41c4-85dc-066f2f266107"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mYKxUVcFMNrRjuZPciTIO",
              "ctx": null,
              "_testId": "urn:uuid:2e9fd4e2-da29-43da-b81a-7de2721c33a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mYKxUVcFMNrRjuZPciTIO",
              "ctx": null,
              "_testId": "urn:uuid:3982faea-ebda-4de5-908c-bd2fe923d33f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n          const [issuer] = endpoints;\n          verifier = implementation.verifiers.find(\n            verifier => verifier.tags.has(tag));\n          const {settings: {id: issuerId, options}} = issuer;\n          const body = {credential: klona(validVc), options};\n          body.credential.id = `urn:uuid:${uuidv4()}`;\n          body.credential.issuer = issuerId;\n          const {data, error} = await issuer.post({json: body});\n          if(error) {\n            throw error;\n          }\n          issuedVc = data;\n          const {proof} = issuedVc || {};\n          proofs = Array.isArray(proof) ? proof : [proof];\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "mYKxUVcFMNrRjuZPciTIO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21592,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 565,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "n5ScMHQgk00Cps9IpOc4I",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
          "_testId": "urn:uuid:fdaddb09-8f38-4aa1-81c5-943f09fd714c"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "xisEH67X-H6o3K8_fEplJ",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:ca2803a4-299f-491e-b09c-77412bcc659c",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Aviary Tech",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
          "cells": [
            {
              "cell": {
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Doy2X6Ia2NjZhnty9II0B",
              "ctx": null,
              "_testId": "urn:uuid:775d0ace-a8f6-4e67-bbae-6df4ea444266",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16763,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "PE6rxszHe6gHKesWWwB9n",
              "ctx": null,
              "_testId": "urn:uuid:fc40bae8-3776-47bb-89a2-cd172590ca8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one Ed25519 proof.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one Ed25519 proof.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:73:42)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "rVA7X98Qv2en3BqtSI28A",
              "ctx": null,
              "_testId": "urn:uuid:ec0750df-7416-49c8-ab40-9dae7cbd85cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17915,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "cophLXhTWrvA78Yp41Fja",
              "ctx": null,
              "_testId": "urn:uuid:f1830a7f-37bb-40b3-b788-000ee1d069df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "sJ1HOnxURcW25RkjtftXK",
              "ctx": null,
              "_testId": "urn:uuid:8fe17252-cab1-4fbc-86b2-93c54863d4af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20588,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one Ed25519 proof.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one Ed25519 proof.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:73:42)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "OdL82pdw0x3NguFjeU3FE",
              "ctx": null,
              "_testId": "urn:uuid:f926b21a-8fc4-477d-95ff-5dd3565ca0a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "da8W8YcIt2ccCt8yjsVWt",
              "ctx": null,
              "_testId": "urn:uuid:0eb4459d-28d5-4978-ad58-8bdefd51e914",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21482,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const ed25519Proofs = proofs.filter(\n            proof => proof?.type === 'Ed25519Signature2020');\n          ed25519Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'Ed25519 proof.');\n          for(const proof of ed25519Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key bytes to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 bytes ' +\n                'proofValue for 32 bytes key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 bytes ' +\n                'proofValue for 57 bytes key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mYKxUVcFMNrRjuZPciTIO",
              "ctx": null,
              "_testId": "urn:uuid:2e9fd4e2-da29-43da-b81a-7de2721c33a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "cell": {
                "rowId": "\"proof\" MUST verify when using a conformant verifier.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "Doy2X6Ia2NjZhnty9II0B",
              "ctx": null,
              "_testId": "urn:uuid:bf523517-f0d5-496d-a752-c38a49adff59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:e8fb8ae9-ba9b-4fb4-9897-2839a3a844f3\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:01:46Z\",\"proofValue\":\"z2eeKQHB4YuNf6m32DhCwuoMeRdzvEvfHppYWsXy9t6x7UiJ7eKrfSsAT1JcPsfYppyCvkLg7gMinC4kqJ7X8DNmJ\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:e8fb8ae9-ba9b-4fb4-9897-2839a3a844f3",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:01:46Z",
                          "proofValue": "z2eeKQHB4YuNf6m32DhCwuoMeRdzvEvfHppYWsXy9t6x7UiJ7eKrfSsAT1JcPsfYppyCvkLg7gMinC4kqJ7X8DNmJ"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js:105:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "PE6rxszHe6gHKesWWwB9n",
              "ctx": null,
              "_testId": "urn:uuid:42c33180-b8f6-4a1e-bfdf-f3a9d1d756d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17176,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "rVA7X98Qv2en3BqtSI28A",
              "ctx": null,
              "_testId": "urn:uuid:2c7172e2-d07e-445a-a825-a6b26e315fd7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17918,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1332,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "cophLXhTWrvA78Yp41Fja",
              "ctx": null,
              "_testId": "urn:uuid:dfb683f4-902f-44a1-8318-597b9a320283",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 784,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "sJ1HOnxURcW25RkjtftXK",
              "ctx": null,
              "_testId": "urn:uuid:97d91683-e911-4046-a26e-0777fc9a4e8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "OdL82pdw0x3NguFjeU3FE",
              "ctx": null,
              "_testId": "urn:uuid:c8351f6e-c6f3-42c6-a473-6d47e503d625",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "da8W8YcIt2ccCt8yjsVWt",
              "ctx": null,
              "_testId": "urn:uuid:ddf289dd-bde8-4c01-9255-08802b5bdfb5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21483,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title,\n            };\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'HTTP API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/10-create.js",
              "parent": "mYKxUVcFMNrRjuZPciTIO",
              "ctx": null,
              "_testId": "urn:uuid:3982faea-ebda-4de5-908c-bd2fe923d33f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:43dea2fe-cf21-4f12-8671-b700ff67c02c",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22340,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 399,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:39:7)"
              }
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:57dd4dbe-0eaf-4129-87eb-471c0d679f34",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:51:7)"
              }
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:afa125d9-29f0-42d8-a8f6-4bc0cff5c4aa",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:63:7)"
              }
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:a2a38520-15fb-40bd-a793-cfd024220e9a",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:82:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:553ece64-dece-4652-a3e6-04795364c1f1",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:126:9)"
              }
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:85f5c92e-90e2-4b16-b41c-e7c247152693",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:139:7)"
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:263a308e-182b-4daf-ab74-1f819f44e866",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23197,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async shouldBeProofValue (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:311:3)"
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:e41fb5a6-a02d-4cd9-a933-a4f1d10d4eea",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23197,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async shouldBeProofValue (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:311:3)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:3511493e-6e62-4024-8b2d-a08e4eb89613",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:165:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:da28b36c-1b07-484f-b47e-149d66561cdc",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:194:7)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"ACA-py\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"ACA-py\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:36e14d61-c6f2-479b-a659-2eba7f644cdf"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:bc48a577-7eea-4c75-84db-67b256163e45",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23378,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2831,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:7f79a10a-68aa-4066-b907-098359a6623a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:52268ee0-a2d3-4279-8dce-66071b9a875c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:5b9abd05-9826-42dd-937d-031c8b3dd35f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26454,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 306,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:6a9dc5f4-fc08-4541-a681-3dd8491fe057",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26759,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:2479510c-bd53-4bc7-987b-b59f11cad193",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:1cb6c197-8cb0-4570-98ea-fa7f47c41abd",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:6fe7c7fc-b2a7-419a-88e6-eb7fe34fa401",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:db005598-5122-4d53-ba16-23a9be1b243d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 222,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:dfa53977-0f7e-47fe-ae9e-f0c07fdec41d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:ec405c7f-6126-4820-8304-215361914a38"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:f8039d44-88a9-4420-8c26-60c2378313e7",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:954a1ddc-a664-4aac-a187-01ad36b61d29",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:6334f05b-5302-4f65-baad-e5cd47604566",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:ab3575d7-5010-4fda-8972-0dc7302038dd",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:5d673f41-94fd-4793-99a9-2ec82d940636",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:234e0e39-e2dc-47bc-b558-356f290ef6f9",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:7b70f77c-67dd-401f-959f-d3de2aba2a0f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:825051d2-2832-41c3-8d27-2ce7ca2dd1b2",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27907,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:3ce6dcf4-f583-4995-a649-2507351d6a7c",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27908,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:797b8f93-c06e-4033-b0a6-ab9147528320",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Aviary Tech\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:4f99a77f-05c3-433f-a3ee-583b12a0bcb9"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:6ac68408-e16b-4839-8670-0821f97b8b7f",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1383,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:a79b8c2c-93a3-4952-b545-a0272ab9848e",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29443,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 293,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:97e9e032-39bd-45d6-b66d-801e93c1b4ef",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 587,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:68:7)"
              }
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:e527525c-0a73-46fe-96b0-6eb9982824ab",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 867,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC w/o \"proof.verificationMethod\".\": expected undefined to exist",
                "showDiff": false,
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC w/o \"proof.verificationMethod\".\": expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:274:10)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:95:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:c50255a2-c971-4674-86ca-199e336018e9",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31195,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 292,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:2fdca896-a6ab-4f68-ba55-6bdae2a1c8bc",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:9e39cf6c-a45a-41a3-a733-39d40752ab5a",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:ea690206-17c2-4090-a820-2f99b569fc36",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:f53b76f5-bec0-4dde-920a-6e586e411576",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 880,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:919261c3-818b-4584-847d-f2e2fef0ea29",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 539,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Danube Tech\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Danube Tech\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:3c84f97e-77c0-4358-a4bd-7abf87107028"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:a15c30fd-0e3d-4ce1-b0df-9d603bdd2e97",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 213,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:c6461ea5-2ac3-468c-84a5-61d21ab1111a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:60fe9712-0101-45f1-88f7-829ec8c27b85",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:dd28cfa9-4745-416e-b19f-bc675dc24ea5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33771,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 669,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:b51cfb0e-96c4-458e-af16-f89e7e49c462",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:8d7c3011-e146-42bb-ad8d-f5394c94dd7c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34539,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:ffd1f7c5-e9dd-4dfd-8be8-ffc9aab25c8c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:eab3d981-b547-4ea8-bf73-4b7f153a7b9a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:cadff7c5-40e3-4e41-84c2-bc1d1b39521b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:bdec6ea0-5e54-4b5a-8d83-63b041bacb43",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34954,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:642c6b54-d694-48aa-85bc-c690353d3ba5"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:e0951183-d5ee-4edf-91f7-722d208a455f",
              "cell": {
                "columnId": "EWF",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:21a17214-308a-4496-b07a-03615c4d15cb",
              "cell": {
                "columnId": "EWF",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35172,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:efa7b7a8-2475-4c85-9854-0ddfbe3da7f4",
              "cell": {
                "columnId": "EWF",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:709f6121-4cf6-465b-93e3-fd4c5ca5e0aa",
              "cell": {
                "columnId": "EWF",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:6d0791bf-d3ba-4fb5-a448-2f466573cf9b",
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:3396a200-aa16-482f-a0ff-18a5e1db5c3a",
              "cell": {
                "columnId": "EWF",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35412,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:f4f07682-313f-4043-b1fa-e517449e14c0",
              "cell": {
                "columnId": "EWF",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:edc59cee-66ce-4be0-ad27-a17975836e77",
              "cell": {
                "columnId": "EWF",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:b34ea73b-7db7-4a5b-bfcd-721cea6ac40e",
              "cell": {
                "columnId": "EWF",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:856b7f34-2c69-4187-8b3b-e82e3c0d983c",
              "cell": {
                "columnId": "EWF",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"EWF\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"EWF\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:53d9e349-ac0b-402e-9940-cae626ff98be"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:41b9b231-ace0-4fc6-9be4-076d21e514e8",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35567,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 332,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:1090a9fd-8d3d-4638-b1f3-e3ac8643df61",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35899,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:5661d73c-dd26-4619-a479-e4b259cb1c86",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36049,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:13c67700-8dea-4bf2-b657-62067dfcbd57",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36259,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 436,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:c7c229d3-befc-4884-b806-7f1dbb692e20",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 140,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:a3bb424b-53f7-4c41-8ae6-3db2687070b7",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:a2892151-462f-469c-b5eb-815db7c2ed5e",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:7b9ea3b7-9836-4482-93ae-3a0784af84b2",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:71c9ed2e-6c5d-498b-aa39-a8bf0f55c2f9",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 444,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:8299c756-9796-4093-bcf9-d47438c8d083",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37414,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"LearnCard\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"LearnCard\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:0340427e-a696-4ce5-8afd-d6c20c1f2684"
        },
        {
          "title": "Netis",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:97debc15-e3a0-4b0b-b9b9-1750c4fc3307",
              "cell": {
                "columnId": "Netis",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 600,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:1677a329-0eea-4e74-a7d4-0e9574590af0",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38149,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 181,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:f62deb29-ddcb-4763-bcd1-3a5dffa887c8",
              "cell": {
                "columnId": "Netis",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 364,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:1a09116f-729d-4ca0-861f-06e8056cf96e",
              "cell": {
                "columnId": "Netis",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 729,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:79d45597-6116-4360-8a81-2121ce5f888f",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 181,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:5ae5ef46-b9c0-401c-8310-bad5a3de9db1",
              "cell": {
                "columnId": "Netis",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:16fd668f-e2d6-4820-b83e-7c2b9c2d2f2c",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:51a5b555-9016-4171-bd81-3c45c80cd024",
              "cell": {
                "columnId": "Netis",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:199b34ac-61b3-49d9-af8f-07ad45231731",
              "cell": {
                "columnId": "Netis",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 540,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:4312d72f-9586-4c0a-a022-a0bc741d9bd4",
              "cell": {
                "columnId": "Netis",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40328,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Netis\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Netis\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37547,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:ad995715-0cde-4693-8084-679f46deb999"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:f04e2d41-b3d8-44d2-bd06-9c5c73e8db01",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:f32da7fe-5b47-4494-a905-4e380d6aba8c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40626,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:0055d0e2-4022-415e-81d9-93b211893b40",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40718,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 187,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:30b1e8d0-bfba-4702-b4d9-868371af737a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:d77266c7-9d9b-49e3-9d35-524cc443f7af",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:e2005975-2116-4e91-af0e-2b742d11e955",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41371,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:26d4b34b-9629-4606-9aa0-6c8a7efb0c03",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41467,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:71eb4ccf-2fa1-4192-8d9d-e72006e20db3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41467,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:ceed74d4-4822-4818-9118-96ec09857340",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41467,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 308,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:e81bfde6-f9a3-4ea5-9a31-8c76aa739dae",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41776,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40509,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:ae7c9a20-95cb-40c0-ad5d-29325cde56ad"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:d3652bc3-8150-4c22-949d-354ee62b6f0e",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 750,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:80d15d4f-92a4-4239-8a59-d11be5fb184c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:2bb9febf-9f6d-4261-8ea1-02762112b81c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 175,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:ddb0ed28-bacc-407d-9dff-b2e17705a2bc",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 350,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:0485bccd-66f0-4146-8d34-0ed178a1e646",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:0fb467e5-a0ea-4632-8844-8bbc51dcf0f1",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43320,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:11f37082-661a-4fc1-96f9-0ca3fa4e1940",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43416,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:09fb5731-09b7-49cd-bfb2-aee7e20dc165",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43416,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:d6ca0400-e339-46b1-8f26-13d62dce34c0",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:a6f03100-c02a-493a-8161-25aed73db9ea",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43732,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trinsic\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:eb82076e-47f4-43fc-b29b-e7937673829e"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"Data Integrity (verifier)\"",
          "body": "async function() {\n      const data = await generateTestData({...testDataOptions, optionalTests});\n      // this might seem weird, but mocha won't wait for credentials to be set\n      // before passing the credentials var to the tests\n      // so we just update the credentials passed to the actual test suite\n      Object.assign(credentials, data);\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "08iH7h1MWnE6BEJtCFmPu",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 22312,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 27,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "0qjd1Y4WxyabPetwrjsWi",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:e894a3e4-1ccc-4bdf-ae17-9b53951b523d",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Aviary Tech",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "Netis",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
          "cells": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:43dea2fe-cf21-4f12-8671-b700ff67c02c",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22340,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 399,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:39:7)"
              }
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:bc48a577-7eea-4c75-84db-67b256163e45",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23378,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2831,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:f8039d44-88a9-4420-8c26-60c2378313e7",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:6ac68408-e16b-4839-8670-0821f97b8b7f",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1383,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:a15c30fd-0e3d-4ce1-b0df-9d603bdd2e97",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 213,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:e0951183-d5ee-4edf-91f7-722d208a455f",
              "cell": {
                "columnId": "EWF",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:41b9b231-ace0-4fc6-9be4-076d21e514e8",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35567,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 332,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:97debc15-e3a0-4b0b-b9b9-1750c4fc3307",
              "cell": {
                "columnId": "Netis",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 600,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:f04e2d41-b3d8-44d2-bd06-9c5c73e8db01",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:d3652bc3-8150-4c22-949d-354ee62b6f0e",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 750,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:57dd4dbe-0eaf-4129-87eb-471c0d679f34",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:51:7)"
              }
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:7f79a10a-68aa-4066-b907-098359a6623a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:954a1ddc-a664-4aac-a187-01ad36b61d29",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:a79b8c2c-93a3-4952-b545-a0272ab9848e",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29443,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 293,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:c6461ea5-2ac3-468c-84a5-61d21ab1111a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:21a17214-308a-4496-b07a-03615c4d15cb",
              "cell": {
                "columnId": "EWF",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35172,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:1090a9fd-8d3d-4638-b1f3-e3ac8643df61",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35899,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:1677a329-0eea-4e74-a7d4-0e9574590af0",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38149,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 181,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:f32da7fe-5b47-4494-a905-4e380d6aba8c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40626,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:80d15d4f-92a4-4239-8a59-d11be5fb184c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:afa125d9-29f0-42d8-a8f6-4bc0cff5c4aa",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22837,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:63:7)"
              }
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:52268ee0-a2d3-4279-8dce-66071b9a875c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:6334f05b-5302-4f65-baad-e5cd47604566",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27618,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:97e9e032-39bd-45d6-b66d-801e93c1b4ef",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29736,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 587,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:68:7)"
              }
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:60fe9712-0101-45f1-88f7-829ec8c27b85",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33568,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:efa7b7a8-2475-4c85-9854-0ddfbe3da7f4",
              "cell": {
                "columnId": "EWF",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:5661d73c-dd26-4619-a479-e4b259cb1c86",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36049,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 209,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:f62deb29-ddcb-4763-bcd1-3a5dffa887c8",
              "cell": {
                "columnId": "Netis",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 364,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:0055d0e2-4022-415e-81d9-93b211893b40",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40718,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 187,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:2bb9febf-9f6d-4261-8ea1-02762112b81c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 175,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:a2a38520-15fb-40bd-a793-cfd024220e9a",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:82:7)"
              }
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:5b9abd05-9826-42dd-937d-031c8b3dd35f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26454,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 306,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:ab3575d7-5010-4fda-8972-0dc7302038dd",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:e527525c-0a73-46fe-96b0-6eb9982824ab",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 867,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC w/o \"proof.verificationMethod\".\": expected undefined to exist",
                "showDiff": false,
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC w/o \"proof.verificationMethod\".\": expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:274:10)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:95:7)"
              }
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:dd28cfa9-4745-416e-b19f-bc675dc24ea5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33771,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 669,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:709f6121-4cf6-465b-93e3-fd4c5ca5e0aa",
              "cell": {
                "columnId": "EWF",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:13c67700-8dea-4bf2-b657-62067dfcbd57",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36259,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 436,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:1a09116f-729d-4ca0-861f-06e8056cf96e",
              "cell": {
                "columnId": "Netis",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 729,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:30b1e8d0-bfba-4702-b4d9-868371af737a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 374,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:ddb0ed28-bacc-407d-9dff-b2e17705a2bc",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 350,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:553ece64-dece-4652-a3e6-04795364c1f1",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:126:9)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:6a9dc5f4-fc08-4541-a681-3dd8491fe057",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26759,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:5d673f41-94fd-4793-99a9-2ec82d940636",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:c50255a2-c971-4674-86ca-199e336018e9",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31195,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 292,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:b51cfb0e-96c4-458e-af16-f89e7e49c462",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:6d0791bf-d3ba-4fb5-a448-2f466573cf9b",
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:c7c229d3-befc-4884-b806-7f1dbb692e20",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 140,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:79d45597-6116-4360-8a81-2121ce5f888f",
              "cell": {
                "columnId": "Netis",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 181,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:d77266c7-9d9b-49e3-9d35-524cc443f7af",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('invalidProofType');\n        await verificationFail({\n          credential,\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.type\"'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:0485bccd-66f0-4146-8d34-0ed178a1e646",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is not the string \"Ed25519Signature2020\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:85f5c92e-90e2-4b16-b41c-e7c247152693",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:139:7)"
              }
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:2479510c-bd53-4bc7-987b-b59f11cad193",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:234e0e39-e2dc-47bc-b558-356f290ef6f9",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:2fdca896-a6ab-4f68-ba55-6bdae2a1c8bc",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31488,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:8d7c3011-e146-42bb-ad8d-f5394c94dd7c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34539,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:3396a200-aa16-482f-a0ff-18a5e1db5c3a",
              "cell": {
                "columnId": "EWF",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35412,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:a3bb424b-53f7-4c41-8ae6-3db2687070b7",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 134,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:5ae5ef46-b9c0-401c-8310-bad5a3de9db1",
              "cell": {
                "columnId": "Netis",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:e2005975-2116-4e91-af0e-2b742d11e955",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41371,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:0fb467e5-a0ea-4632-8844-8bbc51dcf0f1",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43320,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:263a308e-182b-4daf-ab74-1f819f44e866",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23197,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async shouldBeProofValue (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:311:3)"
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:1cb6c197-8cb0-4570-98ea-fa7f47c41abd",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:7b70f77c-67dd-401f-959f-d3de2aba2a0f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:9e39cf6c-a45a-41a3-a733-39d40752ab5a",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:ffd1f7c5-e9dd-4dfd-8be8-ffc9aab25c8c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:f4f07682-313f-4043-b1fa-e517449e14c0",
              "cell": {
                "columnId": "EWF",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:a2892151-462f-469c-b5eb-815db7c2ed5e",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:16fd668f-e2d6-4820-b83e-7c2b9c2d2f2c",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:26d4b34b-9629-4606-9aa0-6c8a7efb0c03",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41467,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:11f37082-661a-4fc1-96f9-0ca3fa4e1940",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43416,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:e41fb5a6-a02d-4cd9-a933-a4f1d10d4eea",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23197,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async shouldBeProofValue (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:311:3)"
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:6fe7c7fc-b2a7-419a-88e6-eb7fe34fa401",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:825051d2-2832-41c3-8d27-2ce7ca2dd1b2",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27907,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:ea690206-17c2-4090-a820-2f99b569fc36",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:eab3d981-b547-4ea8-bf73-4b7f153a7b9a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:edc59cee-66ce-4be0-ad27-a17975836e77",
              "cell": {
                "columnId": "EWF",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:7b9ea3b7-9836-4482-93ae-3a0784af84b2",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:51a5b555-9016-4171-bd81-3c45c80cd024",
              "cell": {
                "columnId": "Netis",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:71eb4ccf-2fa1-4192-8d9d-e72006e20db3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41467,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:09fb5731-09b7-49cd-bfb2-aee7e20dc165",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43416,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:3511493e-6e62-4024-8b2d-a08e4eb89613",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23198,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:165:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:db005598-5122-4d53-ba16-23a9be1b243d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 222,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:3ce6dcf4-f583-4995-a649-2507351d6a7c",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27908,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 121,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:f53b76f5-bec0-4dde-920a-6e586e411576",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 880,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:cadff7c5-40e3-4e41-84c2-bc1d1b39521b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 316,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:b34ea73b-7db7-4a5b-bfcd-721cea6ac40e",
              "cell": {
                "columnId": "EWF",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:71c9ed2e-6c5d-498b-aa39-a8bf0f55c2f9",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 444,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:199b34ac-61b3-49d9-af8f-07ad45231731",
              "cell": {
                "columnId": "Netis",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 39788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 540,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:ceed74d4-4822-4818-9118-96ec09857340",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41467,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 308,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:d6ca0400-e339-46b1-8f26-13d62dce34c0",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "foJ__0QqktJnDj_R48Uhz",
              "ctx": null,
              "_testId": "urn:uuid:da28b36c-1b07-484f-b47e-149d66561cdc",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23286,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Received 500 Internal Server Error.: expected 500 to be one of [ 400, 422 ]\n    at shouldBeErrorResponse (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:278:28)\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:85:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:194:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "iOvMaLwRnfLw0BnNA1unH",
              "ctx": null,
              "_testId": "urn:uuid:dfa53977-0f7e-47fe-ae9e-f0c07fdec41d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "kS8oWrOQoWXrDi6izC4Tu",
              "ctx": null,
              "_testId": "urn:uuid:797b8f93-c06e-4033-b0a6-ab9147528320",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "xZP3s2cOEhBNxWaphHw24",
              "ctx": null,
              "_testId": "urn:uuid:919261c3-818b-4584-847d-f2e2fef0ea29",
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32669,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 539,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "UFZwO428lig3TA_dv083t",
              "ctx": null,
              "_testId": "urn:uuid:bdec6ea0-5e54-4b5a-8d83-63b041bacb43",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34954,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pNDGwbkfOCXMUMALD0xyT",
              "ctx": null,
              "_testId": "urn:uuid:856b7f34-2c69-4187-8b3b-e82e3c0d983c",
              "cell": {
                "columnId": "EWF",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "0fxdabOa1nou2CxTU97bH",
              "ctx": null,
              "_testId": "urn:uuid:8299c756-9796-4093-bcf9-d47438c8d083",
              "cell": {
                "columnId": "LearnCard",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37414,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "pKWuHez6ji_zAuKe5gPiN",
              "ctx": null,
              "_testId": "urn:uuid:4312d72f-9586-4c0a-a022-a0bc741d9bd4",
              "cell": {
                "columnId": "Netis",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40328,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "CWfYum-L400UFSkz09Cp7",
              "ctx": null,
              "_testId": "urn:uuid:e81bfde6-f9a3-4ea5-9a31-8c76aa739dae",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41776,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "uuGvsG08K7c8yBXuPf9CG",
              "ctx": null,
              "_testId": "urn:uuid:a6f03100-c02a-493a-8161-25aed73db9ea",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43732,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Ed25519Signature2020 (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "TJgAMGZz44EBzGewsLa5g",
              "ctx": null,
              "_testId": "urn:uuid:e9de1f63-789d-4920-9513-e922163d056b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 343,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:64:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:56:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "TJgAMGZz44EBzGewsLa5g",
              "ctx": null,
              "_testId": "urn:uuid:e389666d-dc35-48c3-a68f-a76cafb25f5e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:52:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:73:11)"
              }
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "TJgAMGZz44EBzGewsLa5g",
              "ctx": null,
              "_testId": "urn:uuid:f87ed251-1561-4556-94d4-56da0ad4f4cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:52:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:82:11)"
              }
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "TJgAMGZz44EBzGewsLa5g",
              "ctx": null,
              "_testId": "urn:uuid:f0c43fa3-30d3-4a82-a632-03798b80b137",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:52:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:91:11)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:efac582e-644f-4011-b544-fe14a657fd13"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "B9Hk4ZcZdQYwvDdQOSWsS",
              "ctx": null,
              "_testId": "urn:uuid:bdf70084-dd41-4ee1-9bb4-b31681e832d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "B9Hk4ZcZdQYwvDdQOSWsS",
              "ctx": null,
              "_testId": "urn:uuid:fe9d30a9-4c00-442a-bd78-0bf73f57810e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "B9Hk4ZcZdQYwvDdQOSWsS",
              "ctx": null,
              "_testId": "urn:uuid:ddb772f9-c2b2-4d02-b118-f08bcc40f51b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "B9Hk4ZcZdQYwvDdQOSWsS",
              "ctx": null,
              "_testId": "urn:uuid:11447eec-2d4a-4e0b-a178-cd567c6b9c0e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44771,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:06c263f2-3898-4b92-8b87-ff27a8fd5c08"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "PC6JRgI23YrTaxQ3BLmVv",
              "ctx": null,
              "_testId": "urn:uuid:31a65b2d-bb77-4028-9c9f-2804a5471216",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44854,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:64:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:56:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "PC6JRgI23YrTaxQ3BLmVv",
              "ctx": null,
              "_testId": "urn:uuid:c0a8db07-64d4-4a50-9332-1713d94230a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44968,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "PC6JRgI23YrTaxQ3BLmVv",
              "ctx": null,
              "_testId": "urn:uuid:e04267a2-13ee-4cf9-a87e-66e66f97d82e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "PC6JRgI23YrTaxQ3BLmVv",
              "ctx": null,
              "_testId": "urn:uuid:978e4893-c7cf-415f-8cc8-655dcdce9dc9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:e8bc8c69-8ffc-44af-a6bd-e757954be18c"
        },
        {
          "title": "Danube Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "Urll6-RPhbCe01JWPhx3c",
              "ctx": null,
              "_testId": "urn:uuid:447c0d02-38d5-4923-b1e4-68127fbb345a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 678,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "Urll6-RPhbCe01JWPhx3c",
              "ctx": null,
              "_testId": "urn:uuid:a899bf92-6074-4a3f-b7da-8a6935161208",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 313,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "Urll6-RPhbCe01JWPhx3c",
              "ctx": null,
              "_testId": "urn:uuid:4c7285b1-8c9e-4170-9214-1882b9e62f92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46052,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "Urll6-RPhbCe01JWPhx3c",
              "ctx": null,
              "_testId": "urn:uuid:4a7b9897-1a08-4595-92e9-f4505aee7858",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46367,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:0e4d6f7b-f1da-4eba-90e1-a1b654384d0f"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "MWes_4c7iXAstwCUaQgJk",
              "ctx": null,
              "_testId": "urn:uuid:4b83d7a8-58dd-4ce6-932d-87e79e12d44b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 175,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "MWes_4c7iXAstwCUaQgJk",
              "ctx": null,
              "_testId": "urn:uuid:150b8a32-01b3-4405-810e-2083c5b52a2b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "MWes_4c7iXAstwCUaQgJk",
              "ctx": null,
              "_testId": "urn:uuid:fa28d770-fcf7-467c-aa65-4fcc755a221c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "MWes_4c7iXAstwCUaQgJk",
              "ctx": null,
              "_testId": "urn:uuid:3287b2e3-7914-433d-a76c-7348f0c433ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47072,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:e745dd96-53b9-4f39-8dac-01515a90c2b9"
        },
        {
          "title": "EWF",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "joW3WNFqepGRcKI5Jv-ZP",
              "ctx": null,
              "_testId": "urn:uuid:d3915f01-95aa-456a-a2da-c6de67ec2950",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47184,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "joW3WNFqepGRcKI5Jv-ZP",
              "ctx": null,
              "_testId": "urn:uuid:021c7126-d3f9-43b3-873f-733fbb3b892c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "joW3WNFqepGRcKI5Jv-ZP",
              "ctx": null,
              "_testId": "urn:uuid:1eecbb3e-96e0-43ea-ae4d-74c93eb804eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "joW3WNFqepGRcKI5Jv-ZP",
              "ctx": null,
              "_testId": "urn:uuid:1240a09c-5881-4f6a-8482-d2402eda4399",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47361,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:ff6195a9-8bc1-467b-a23d-b83021982e87"
        },
        {
          "title": "LearnCard",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "KC7tFCx5L7PAkTQD8WtqM",
              "ctx": null,
              "_testId": "urn:uuid:9ed4d480-0fbb-4350-8cca-a145ba1ea4e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 292,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "KC7tFCx5L7PAkTQD8WtqM",
              "ctx": null,
              "_testId": "urn:uuid:8d21f0c1-9889-4136-acde-1f1718e66303",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47704,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 162,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "KC7tFCx5L7PAkTQD8WtqM",
              "ctx": null,
              "_testId": "urn:uuid:f0f72c18-a8c4-465e-b382-191ee3e9b9fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "KC7tFCx5L7PAkTQD8WtqM",
              "ctx": null,
              "_testId": "urn:uuid:c13e1acb-b00d-4a31-aa44-5d735a6fce28",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:0fe21e82-7e14-4cfe-9b30-4aa8faa5863e"
        },
        {
          "title": "Netis",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "-4gJTj4sOM7k_ZZXw_dDK",
              "ctx": null,
              "_testId": "urn:uuid:0de965d9-60bf-4ed8-aa62-50e9b8c55862",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Netis",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 615,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "-4gJTj4sOM7k_ZZXw_dDK",
              "ctx": null,
              "_testId": "urn:uuid:e6a1b3dd-7866-4f51-b5b7-2acb9754e71c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Netis",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48774,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "-4gJTj4sOM7k_ZZXw_dDK",
              "ctx": null,
              "_testId": "urn:uuid:0ce1136a-9251-4400-a403-ca672421985a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Netis",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "-4gJTj4sOM7k_ZZXw_dDK",
              "ctx": null,
              "_testId": "urn:uuid:af2661b4-e2a9-4802-9e4f-0579df47c8e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Netis",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49166,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:a71f2784-b603-4f53-bcf2-4c57e21f1b1e"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "OuUUgWiN8aets-rImaWAy",
              "ctx": null,
              "_testId": "urn:uuid:df08b84d-c8ea-439f-a80a-14567302bb52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "OuUUgWiN8aets-rImaWAy",
              "ctx": null,
              "_testId": "urn:uuid:55e39152-e024-434c-bb3b-7b5b693e2344",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "OuUUgWiN8aets-rImaWAy",
              "ctx": null,
              "_testId": "urn:uuid:268826aa-0e84-4cb9-a350-77c63661899f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "OuUUgWiN8aets-rImaWAy",
              "ctx": null,
              "_testId": "urn:uuid:f03c10b1-6b13-4a56-8ad9-5ae7d689b979",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:266f1c4b-5417-4833-82ff-d352ec2c30e8"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "w3ugM2Dyd4YnoFmt0acdy",
              "ctx": null,
              "_testId": "urn:uuid:40d5b1ea-67fb-49aa-b358-bca7d0e1c415",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "w3ugM2Dyd4YnoFmt0acdy",
              "ctx": null,
              "_testId": "urn:uuid:7e2f48b2-9f77-4fb4-8875-5a6a6844f680",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49907,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "w3ugM2Dyd4YnoFmt0acdy",
              "ctx": null,
              "_testId": "urn:uuid:38bcd7a1-80c2-459e-ac11-872e54c9003f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "w3ugM2Dyd4YnoFmt0acdy",
              "ctx": null,
              "_testId": "urn:uuid:ab108199-53f2-4c5e-b61b-a0427f8726fa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i8DftJTgV3NgoozGG1kMp",
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
          "_testId": "urn:uuid:457504de-4fde-438b-a670-a2dba156b56b"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "0qjd1Y4WxyabPetwrjsWi",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:ca065fd8-43b2-4047-9bef-6a51b549cf21",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Aviary Tech",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "Netis",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an Ed25519Signature2020 proof",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "TJgAMGZz44EBzGewsLa5g",
              "ctx": null,
              "_testId": "urn:uuid:e9de1f63-789d-4920-9513-e922163d056b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 343,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:64:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:56:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "B9Hk4ZcZdQYwvDdQOSWsS",
              "ctx": null,
              "_testId": "urn:uuid:bdf70084-dd41-4ee1-9bb4-b31681e832d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "PC6JRgI23YrTaxQ3BLmVv",
              "ctx": null,
              "_testId": "urn:uuid:31a65b2d-bb77-4028-9c9f-2804a5471216",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44854,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:64:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:56:13)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "Urll6-RPhbCe01JWPhx3c",
              "ctx": null,
              "_testId": "urn:uuid:447c0d02-38d5-4923-b1e4-68127fbb345a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45059,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 678,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "MWes_4c7iXAstwCUaQgJk",
              "ctx": null,
              "_testId": "urn:uuid:4b83d7a8-58dd-4ce6-932d-87e79e12d44b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46682,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 175,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "joW3WNFqepGRcKI5Jv-ZP",
              "ctx": null,
              "_testId": "urn:uuid:d3915f01-95aa-456a-a2da-c6de67ec2950",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47184,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "KC7tFCx5L7PAkTQD8WtqM",
              "ctx": null,
              "_testId": "urn:uuid:9ed4d480-0fbb-4350-8cca-a145ba1ea4e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 292,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "-4gJTj4sOM7k_ZZXw_dDK",
              "ctx": null,
              "_testId": "urn:uuid:0de965d9-60bf-4ed8-aa62-50e9b8c55862",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Netis",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 615,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "OuUUgWiN8aets-rImaWAy",
              "ctx": null,
              "_testId": "urn:uuid:df08b84d-c8ea-439f-a80a-14567302bb52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an Ed25519Signature2020 proof",
              "body": "async function() {\n            this.test.cell = {\n              columnId: name,\n              rowId: this.test.title\n            };\n            const credential = klona(issuedVc);\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "w3ugM2Dyd4YnoFmt0acdy",
              "ctx": null,
              "_testId": "urn:uuid:40d5b1ea-67fb-49aa-b358-bca7d0e1c415",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "MUST verify a valid VC with an Ed25519Signature2020 proof"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "TJgAMGZz44EBzGewsLa5g",
              "ctx": null,
              "_testId": "urn:uuid:e389666d-dc35-48c3-a68f-a76cafb25f5e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:52:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:73:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "B9Hk4ZcZdQYwvDdQOSWsS",
              "ctx": null,
              "_testId": "urn:uuid:fe9d30a9-4c00-442a-bd78-0bf73f57810e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "PC6JRgI23YrTaxQ3BLmVv",
              "ctx": null,
              "_testId": "urn:uuid:c0a8db07-64d4-4a50-9332-1713d94230a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44968,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "Urll6-RPhbCe01JWPhx3c",
              "ctx": null,
              "_testId": "urn:uuid:a899bf92-6074-4a3f-b7da-8a6935161208",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 313,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "MWes_4c7iXAstwCUaQgJk",
              "ctx": null,
              "_testId": "urn:uuid:150b8a32-01b3-4405-810e-2083c5b52a2b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "joW3WNFqepGRcKI5Jv-ZP",
              "ctx": null,
              "_testId": "urn:uuid:021c7126-d3f9-43b3-873f-733fbb3b892c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "KC7tFCx5L7PAkTQD8WtqM",
              "ctx": null,
              "_testId": "urn:uuid:8d21f0c1-9889-4136-acde-1f1718e66303",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47704,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 162,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "-4gJTj4sOM7k_ZZXw_dDK",
              "ctx": null,
              "_testId": "urn:uuid:e6a1b3dd-7866-4f51-b5b7-2acb9754e71c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Netis",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48774,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "OuUUgWiN8aets-rImaWAy",
              "ctx": null,
              "_testId": "urn:uuid:55e39152-e024-434c-bb3b-7b5b693e2344",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49489,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(issuedVc);\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "w3ugM2Dyd4YnoFmt0acdy",
              "ctx": null,
              "_testId": "urn:uuid:7e2f48b2-9f77-4fb4-8875-5a6a6844f680",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49907,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "TJgAMGZz44EBzGewsLa5g",
              "ctx": null,
              "_testId": "urn:uuid:f87ed251-1561-4556-94d4-56da0ad4f4cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:52:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:82:11)"
              }
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "B9Hk4ZcZdQYwvDdQOSWsS",
              "ctx": null,
              "_testId": "urn:uuid:ddb772f9-c2b2-4d02-b118-f08bcc40f51b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "PC6JRgI23YrTaxQ3BLmVv",
              "ctx": null,
              "_testId": "urn:uuid:e04267a2-13ee-4cf9-a87e-66e66f97d82e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "Urll6-RPhbCe01JWPhx3c",
              "ctx": null,
              "_testId": "urn:uuid:4c7285b1-8c9e-4170-9214-1882b9e62f92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46052,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "MWes_4c7iXAstwCUaQgJk",
              "ctx": null,
              "_testId": "urn:uuid:fa28d770-fcf7-467c-aa65-4fcc755a221c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "joW3WNFqepGRcKI5Jv-ZP",
              "ctx": null,
              "_testId": "urn:uuid:1eecbb3e-96e0-43ea-ae4d-74c93eb804eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "KC7tFCx5L7PAkTQD8WtqM",
              "ctx": null,
              "_testId": "urn:uuid:f0f72c18-a8c4-465e-b382-191ee3e9b9fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "-4gJTj4sOM7k_ZZXw_dDK",
              "ctx": null,
              "_testId": "urn:uuid:0ce1136a-9251-4400-a403-ca672421985a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Netis",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 199,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "OuUUgWiN8aets-rImaWAy",
              "ctx": null,
              "_testId": "urn:uuid:268826aa-0e84-4cb9-a350-77c63661899f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectCannonization);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "w3ugM2Dyd4YnoFmt0acdy",
              "ctx": null,
              "_testId": "urn:uuid:38bcd7a1-80c2-459e-ac11-872e54c9003f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a canonicalization algorithm other than URDNA2015 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "TJgAMGZz44EBzGewsLa5g",
              "ctx": null,
              "_testId": "urn:uuid:f0c43fa3-30d3-4a82-a632-03798b80b137",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]",
                "showDiff": true,
                "actual": 500,
                "expected": [
                  400,
                  422
                ],
                "operator": "deepStrictEqual",
                "stack": "AssertionError: Expected HTTP Status code 400 or 422.: expected 500 to be one of [ 400, 422 ]\n    at verificationFail (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/assertions.js:52:26)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js:91:11)"
              }
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "B9Hk4ZcZdQYwvDdQOSWsS",
              "ctx": null,
              "_testId": "urn:uuid:11447eec-2d4a-4e0b-a178-cd567c6b9c0e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44771,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "PC6JRgI23YrTaxQ3BLmVv",
              "ctx": null,
              "_testId": "urn:uuid:978e4893-c7cf-415f-8cc8-655dcdce9dc9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "Urll6-RPhbCe01JWPhx3c",
              "ctx": null,
              "_testId": "urn:uuid:4a7b9897-1a08-4595-92e9-f4505aee7858",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Danube Tech",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46367,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "MWes_4c7iXAstwCUaQgJk",
              "ctx": null,
              "_testId": "urn:uuid:3287b2e3-7914-433d-a76c-7348f0c433ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47072,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "joW3WNFqepGRcKI5Jv-ZP",
              "ctx": null,
              "_testId": "urn:uuid:1240a09c-5881-4f6a-8482-d2402eda4399",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "EWF",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47361,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "KC7tFCx5L7PAkTQD8WtqM",
              "ctx": null,
              "_testId": "urn:uuid:c13e1acb-b00d-4a31-aa44-5d735a6fce28",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "LearnCard",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "-4gJTj4sOM7k_ZZXw_dDK",
              "ctx": null,
              "_testId": "urn:uuid:af2661b4-e2a9-4802-9e4f-0579df47c8e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Netis",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49166,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 200,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "OuUUgWiN8aets-rImaWAy",
              "ctx": null,
              "_testId": "urn:uuid:f03c10b1-6b13-4a56-8ad9-5ae7d689b979",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 49684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {\n            columnId: name,\n            rowId: this.test.title\n          };\n          const credential = klona(incorrectHash);\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/20-verify.js",
              "parent": "w3ugM2Dyd4YnoFmt0acdy",
              "ctx": null,
              "_testId": "urn:uuid:ab108199-53f2-4c5e-b61b-a0427f8726fa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a canonicalization data hashing algorithm SHA-2-256 is used, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Ed25519Signature2020 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n    const credentials = await generateTestData();\n    validVc = credentials.get('validVc');\n  }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 50218,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has(tag));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 50219,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 244,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has(tag));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 50463,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 222,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has(tag));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 50685,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 82,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has(tag));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 50767,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 616,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has(tag));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 51383,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 369,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has(tag));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 51752,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 105,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has(tag));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 51857,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 140,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has(tag));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 51997,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 110,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"Ed25519Signature2020 (interop)\"",
          "body": "async function() {\n      const issuer = issuers.find(issuer =>\n        issuer.tags.has(tag));\n      const {settings: {id: issuerId, options}} = issuer;\n      const body = {credential: klona(validVc), options};\n      body.credential.id = `urn:uuid:${uuidv4()}`;\n      body.credential.issuer = issuerId;\n      const {data, error} = await issuer.post({json: body});\n      issuerError = error;\n      issuedVc = data;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "yfaW5ApKr7TrxwoFZVUph",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 52107,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 103,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "ibPIO07-rrduQ7LQ0dT_4",
      "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:6338a153-cc78-4452-89c7-e83b1eae87c1",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Aviary Tech",
        "Danube Tech",
        "Digital Bazaar",
        "EWF",
        "LearnCard",
        "Netis",
        "SpruceID",
        "Trinsic"
      ],
      "rows": [
        {
          "id": "ACA-py",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:9acf712f-25f0-4b01-8061-d4f3dc5556aa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:94caaeba-5725-4731-83ac-ad5fa08ffd7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52212,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:52a2893f-3302-4ca3-ad53-a7aa53f8b1d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52212,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:74f46674-d7f6-4632-86ce-7408ba9eb74d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:5465bdb4-71d9-4188-86d4-ee15214b1d91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "EWF should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:83e8c689-d5f5-4234-a186-387800d6eaef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52215,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "LearnCard should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:37e2eb45-c48c-486a-9b09-2fea26d729c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52216,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:ea92e0ed-8ffa-4f22-973c-8937533bbf04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52217,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:427d5429-5ff2-4bc5-9a58-bc214b391e7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52217,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:ad574f73-cfc4-4758-95c6-98895f63ac06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52218,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"Ed25519Signature2020\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:66faab21-4f3d-4379-8bec-5d57f47f6978",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "Ed25519Signature2020"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to not error: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:54:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ]
        },
        {
          "id": "apicatalog.com",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:1645e352-217d-4167-9b9d-8a81b5d1d924",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "type": [
                          "Not a valid list."
                        ]
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:4ef692c0-93db-434f-9d9a-1baf2fb2851f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:cfe87d35-80a8-40cb-9acc-43539933a8cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "Credential verification failed: [\"One or more proofs failed verification\"]"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:f6a8f644-c0ec-4466-a471-bc3139e72d51",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52414,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 904,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:c6b581eb-b23a-4a8d-97a6-b295a4cd35df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53318,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "name": "ValidationError",
                          "message": "should be array",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/suites/ed25519-2020/v1"
                                ],
                                "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                                "type": "VerifiableCredential",
                                "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                },
                                "proof": {
                                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                  "type": "Ed25519Signature2020",
                                  "proofPurpose": "assertionMethod",
                                  "created": "2024-11-17T05:02:20Z",
                                  "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "array"
                            },
                            "path": ".verifiableCredential.type",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/type/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "VerifiableCredential"
                          },
                          "cause": null,
                          "stack": "ValidationError: should be array\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/suites/ed25519-2020/v1"
                                ],
                                "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                                "type": "VerifiableCredential",
                                "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                },
                                "proof": {
                                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                  "type": "Ed25519Signature2020",
                                  "proofPurpose": "assertionMethod",
                                  "created": "2024-11-17T05:02:20Z",
                                  "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "issuer"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/suites/ed25519-2020/v1"
                              ],
                              "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                              "type": "VerifiableCredential",
                              "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                              },
                              "proof": {
                                "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                "type": "Ed25519Signature2020",
                                "proofPurpose": "assertionMethod",
                                "created": "2024-11-17T05:02:20Z",
                                "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                              }
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/suites/ed25519-2020/v1"
                                ],
                                "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                                "type": "VerifiableCredential",
                                "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                },
                                "proof": {
                                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                  "type": "Ed25519Signature2020",
                                  "proofPurpose": "assertionMethod",
                                  "created": "2024-11-17T05:02:20Z",
                                  "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/suites/ed25519-2020/v1"
                              ],
                              "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                              "type": "VerifiableCredential",
                              "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                              },
                              "proof": {
                                "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                "type": "Ed25519Signature2020",
                                "proofPurpose": "assertionMethod",
                                "created": "2024-11-17T05:02:20Z",
                                "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                              }
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "EWF should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:9e53852e-3e8a-44a5-8554-4e3fe8b128ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError { …(7) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": [
                      "verifiableCredential.type must be an array"
                    ],
                    "error": "Bad Request",
                    "statusCode": 400
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError { …(7) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "LearnCard should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:453d7962-7e78-4c2c-b12c-d1acb2e68653",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": "Invalid input: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"array\",\n    \"received\": \"string\",\n    \"path\": [\n      \"verifiableCredential\",\n      \"type\"\n    ],\n    \"message\": \"Expected array, received string\"\n  }\n]"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:8e401124-d9f1-4821-a0e5-bdda711c079a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53639,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 611,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:fdf6e3b2-ebbe-4337-9e4f-2797c627a1d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54251,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:0eddf22f-fdec-4670-8d3a-ad12d227f5e3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 115,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-11-17T05:02:20Z\",\"proofValue\":\"ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:bfab185a-3701-45b0-b1f5-f5a0f0307c61",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=Ed25519Signature2020",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-11-17T05:02:20Z",
                          "proofValue": "ztfDtrsG8bLPCndQYL9L8fDVoxzhdQ2UDGfdAqTSohAVa6DzRuTkmMp6XziHtgjEHfHZF4RR32E2JPZ3giYBFTQt"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "Aviary Tech",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:53a006d5-28a6-444f-a3dd-7c880333f632",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-11-17T05:02:20.937Z\",\"verificationMethod\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh\"}]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2024-11-17T05:02:20.937Z",
                            "verificationMethod": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:3825849b-d5ee-46d0-94a7-670f9101c5f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:1379c17e-c281-48f9-8110-ae9635ac8691",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Danube Tech should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:490a082a-356d-48a3-b5b7-147d35bb73e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54672,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 750,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-11-17T05:02:20.937Z\",\"verificationMethod\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh\"}]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2024-11-17T05:02:20.937Z",
                            "verificationMethod": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "proof"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:8d85b0b6-dcb5-4c6e-9741-941f4541dbc6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:9bfe0209-070c-421f-ae2e-b9a4ba50da79",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55528,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError { …(7) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-11-17T05:02:20.937Z\",\"verificationMethod\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh\"}]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2024-11-17T05:02:20.937Z",
                            "verificationMethod": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": [
                      "verifiableCredential.proof must be an object"
                    ],
                    "error": "Bad Request",
                    "statusCode": 400
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError { …(7) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "LearnCard should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:98889e13-cd2f-4231-aa59-de5ae7438a24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-11-17T05:02:20.937Z\",\"verificationMethod\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh\"}]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2024-11-17T05:02:20.937Z",
                            "verificationMethod": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "proof",
                      "expiration"
                    ],
                    "warnings": [],
                    "errors": [
                      "Linked Data Proof type not implemented"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:c1b19f71-8ac4-4f4c-ad42-5f8a94d3e463",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55702,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 207,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:3be47715-e44e-4ee3-8178-bb3669ae8a80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:c5093010-a57b-4074-8183-4a6ac115c9e8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-11-17T05:02:20.937Z\",\"verificationMethod\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh\"}]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:b4c18625-2ff2-4a54-8218-5b53187c1c7f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2024-11-17T05:02:20.937Z",
                            "verificationMethod": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zye2jjKxnEBcGHu6T1v9hPuqb4T7xiF38LQdSMM14RMHpr2sBcuK784uK344V1t7xi8HtADrbvuspMfL22EFhGkh"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "Danube Tech",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:0e0309bb-8796-4b8b-b9ac-67805069911e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56096,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:5c1386df-0a9f-46ee-b97b-b0e896f4306a\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-11-17T05:02:21Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo#z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo\",\"proofValue\":\"z5Fw9ZVRADMJuFPpZy772xfq3Aq57FUnHpxSHM6rGsmCtbPrJWXDYhc6ni6iDU944VorFg5nK7aKYseToSUzqDWrV\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:5c1386df-0a9f-46ee-b97b-b0e896f4306a",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-11-17T05:02:21Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo#z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo",
                          "proofValue": "z5Fw9ZVRADMJuFPpZy772xfq3Aq57FUnHpxSHM6rGsmCtbPrJWXDYhc6ni6iDU944VorFg5nK7aKYseToSUzqDWrV"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:c88e735f-19eb-4ca3-8300-f99fb2b76474",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:481e60a9-fe01-48ac-8c4e-6c430f4ff13e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:5c1386df-0a9f-46ee-b97b-b0e896f4306a\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-11-17T05:02:21Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo#z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo\",\"proofValue\":\"z5Fw9ZVRADMJuFPpZy772xfq3Aq57FUnHpxSHM6rGsmCtbPrJWXDYhc6ni6iDU944VorFg5nK7aKYseToSUzqDWrV\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:5c1386df-0a9f-46ee-b97b-b0e896f4306a",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-11-17T05:02:21Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo#z6MksvTdeczd92YQ5W2V2gL9kXdRvD2AEiyJPoWieP95HUDo",
                          "proofValue": "z5Fw9ZVRADMJuFPpZy772xfq3Aq57FUnHpxSHM6rGsmCtbPrJWXDYhc6ni6iDU944VorFg5nK7aKYseToSUzqDWrV"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "Credential verification failed: [\"One or more proofs failed verification\"]"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:02c72c35-b1df-4d03-8e54-659a15ff81c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56311,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 308,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:82f1d34b-a0e8-4bed-be27-8806fc283c77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56619,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:e5723b66-db97-47a8-a2b1-8ab1bce818f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56723,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "LearnCard should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:ae3ee7d2-fe40-4bb5-816f-3876cdad00ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:eecf3c37-3550-4329-b9a6-abdbd22043b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:9221269f-6309-4a1b-aaec-c7d508d95d4b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Danube Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:a8a15ecd-d47c-43aa-8002-1e6515ebf0e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Danube Tech",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:61220e4d-ceb7-44db-93f1-fc5fa0ccd0ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:ef3d0b5e-1e83-43b3-b23e-d00702dacb3f\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-11-17T05:02:21Z\",\"verificationMethod\":\"did:key:z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN#z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5PuyGzPNHxbFNETV2aQHHRFoeUZti8jEk7q1So4Y8QmHdPxdEnjx79495YqXEJ5N7mY9ob1jCkNXWejMwkyY2gtX\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:ef3d0b5e-1e83-43b3-b23e-d00702dacb3f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-11-17T05:02:21Z",
                          "verificationMethod": "did:key:z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN#z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5PuyGzPNHxbFNETV2aQHHRFoeUZti8jEk7q1So4Y8QmHdPxdEnjx79495YqXEJ5N7mY9ob1jCkNXWejMwkyY2gtX"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:3fb85b3c-3c68-405d-b078-f405cc69923a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:841b79ca-9dcd-4258-974c-c53df5179bdb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:ef3d0b5e-1e83-43b3-b23e-d00702dacb3f\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-11-17T05:02:21Z\",\"verificationMethod\":\"did:key:z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN#z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5PuyGzPNHxbFNETV2aQHHRFoeUZti8jEk7q1So4Y8QmHdPxdEnjx79495YqXEJ5N7mY9ob1jCkNXWejMwkyY2gtX\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:ef3d0b5e-1e83-43b3-b23e-d00702dacb3f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-11-17T05:02:21Z",
                          "verificationMethod": "did:key:z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN#z6MkkZu37ESix41fjPc2bFJ6eGsz1mbzdSn1MYcuU2qWBDAN",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5PuyGzPNHxbFNETV2aQHHRFoeUZti8jEk7q1So4Y8QmHdPxdEnjx79495YqXEJ5N7mY9ob1jCkNXWejMwkyY2gtX"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "Credential verification failed: [\"One or more proofs failed verification\"]"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:3b7bf494-0c4e-40d3-9e10-936fd2532dfc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57518,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 306,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:b71679ab-e9de-4c61-b444-b596fef31187",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:2c809d70-abc5-4b47-8079-f0e519556f24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "LearnCard should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:cb3a3cbc-f850-42bc-983d-854f4408429b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57983,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:d7a5aea6-43ab-4c82-b22c-a2ef31941b45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 221,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:952664b0-8a42-438e-8a67-a7db9c55c276",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:2261e46a-e679-439e-9b9f-b0642acf45b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58451,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "EWF",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:badca890-b42d-4f46-a6e3-0c21443dae1e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58564,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2018\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"created\":\"2024-11-17T05:02:22.027Z\",\"jws\":\"eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2018",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                          "created": "2024-11-17T05:02:22.027Z",
                          "jws": "eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:01711423-961e-44bb-9fc7-d988fcda34b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58708,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2018\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"created\":\"2024-11-17T05:02:22.027Z\",\"jws\":\"eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2018",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                          "created": "2024-11-17T05:02:22.027Z",
                          "jws": "eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:ca0ad298-aa2d-4547-9a39-3df3006fcfc8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2018\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"created\":\"2024-11-17T05:02:22.027Z\",\"jws\":\"eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2018",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                          "created": "2024-11-17T05:02:22.027Z",
                          "jws": "eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "Credential verification failed: [\"One or more proofs failed verification\"]"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:59b6e62f-feee-4988-8266-a210a46e8813",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 305,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:52574c21-455b-454e-9747-611b3ba1b8f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:31ec6f56-9e02-4dde-b84c-9f9b5ee2d9dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59230,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "LearnCard should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:77b9f9d5-9c53-47cb-9d92-adebc811db2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:8a8d77a0-bd4a-49bd-a73b-2a48f4114d9e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 188,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2018\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"created\":\"2024-11-17T05:02:22.027Z\",\"jws\":\"eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2018",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                          "created": "2024-11-17T05:02:22.027Z",
                          "jws": "eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:d63953ed-bbd4-4daf-8bdc-dfaaf97b94a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59605,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify EWF",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:145ebf76-a7bd-4975-b83b-3b34449d5c3e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "EWF",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2018\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6\",\"created\":\"2024-11-17T05:02:22.027Z\",\"jws\":\"eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:28a9cae5-9ef4-43db-a084-729dce452c84",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2018",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6#z6MksoRPRqnMWiivV4weRGGS9SiHXuqfJEYu95EiYtbvBxW6",
                          "created": "2024-11-17T05:02:22.027Z",
                          "jws": "eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..zZUdVGTg3KWc_bUkXwhzV2bs9cHQcuukYJShIfAehUDwN1H8mGOp0NVnG5AoksTOENsVxYuqUnDhh5l-lZZ-CA"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "LearnCard",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:29334a87-0566-4d6e-848d-1fa742ca4469",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59793,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:6c333598-41ba-43d6-b9bc-6c6a6a1e8a62\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zf1PArBgeBDd3dkgxt1M4cSGD5NzPk9ttg1mrXASncJ7ftfg7EbA8wUxABu3NTMqebj73ALZfWZTbM85fkLPt2Ds\",\"verificationMethod\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"created\":\"2024-11-17T05:02:22.142Z\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:6c333598-41ba-43d6-b9bc-6c6a6a1e8a62",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zf1PArBgeBDd3dkgxt1M4cSGD5NzPk9ttg1mrXASncJ7ftfg7EbA8wUxABu3NTMqebj73ALZfWZTbM85fkLPt2Ds",
                          "verificationMethod": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                          "created": "2024-11-17T05:02:22.142Z"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:e7b795ac-918c-4154-a6e6-22e4de5c125a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:e4132442-09c1-4d4d-97fb-74bae4cb64ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59967,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:6c333598-41ba-43d6-b9bc-6c6a6a1e8a62\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zf1PArBgeBDd3dkgxt1M4cSGD5NzPk9ttg1mrXASncJ7ftfg7EbA8wUxABu3NTMqebj73ALZfWZTbM85fkLPt2Ds\",\"verificationMethod\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"created\":\"2024-11-17T05:02:22.142Z\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:6c333598-41ba-43d6-b9bc-6c6a6a1e8a62",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zf1PArBgeBDd3dkgxt1M4cSGD5NzPk9ttg1mrXASncJ7ftfg7EbA8wUxABu3NTMqebj73ALZfWZTbM85fkLPt2Ds",
                          "verificationMethod": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                          "created": "2024-11-17T05:02:22.142Z"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "Credential verification failed: [\"One or more proofs failed verification\"]"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:2db3b698-be1d-4898-a1d9-b674c099b31c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 305,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:6c333598-41ba-43d6-b9bc-6c6a6a1e8a62\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zf1PArBgeBDd3dkgxt1M4cSGD5NzPk9ttg1mrXASncJ7ftfg7EbA8wUxABu3NTMqebj73ALZfWZTbM85fkLPt2Ds\",\"verificationMethod\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"created\":\"2024-11-17T05:02:22.142Z\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:6c333598-41ba-43d6-b9bc-6c6a6a1e8a62",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zf1PArBgeBDd3dkgxt1M4cSGD5NzPk9ttg1mrXASncJ7ftfg7EbA8wUxABu3NTMqebj73ALZfWZTbM85fkLPt2Ds",
                          "verificationMethod": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                          "created": "2024-11-17T05:02:22.142Z"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://univerifier.io/1.0/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "proof"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:b642ca56-01d8-4461-b7fa-0ced1ad895b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1"
                        ],
                        "id": "urn:uuid:6c333598-41ba-43d6-b9bc-6c6a6a1e8a62",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zf1PArBgeBDd3dkgxt1M4cSGD5NzPk9ttg1mrXASncJ7ftfg7EbA8wUxABu3NTMqebj73ALZfWZTbM85fkLPt2Ds",
                          "verificationMethod": "did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh",
                          "created": "2024-11-17T05:02:22.142Z"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:6c333598-41ba-43d6-b9bc-6c6a6a1e8a62\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zf1PArBgeBDd3dkgxt1M4cSGD5NzPk9ttg1mrXASncJ7ftfg7EbA8wUxABu3NTMqebj73ALZfWZTbM85fkLPt2Ds\",\"verificationMethod\":\"did:key:z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh#z6MkjSz4mYqcn7dePGuktJ5PxecMkXQQHWRg8Lm6okATyFVh\",\"created\":\"2024-11-17T05:02:22.142Z\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "NotFoundError",
                          "message": "Did not verify any proofs; insufficient proofs matched the acceptable suite(s) and required purpose(s).",
                          "stack": "NotFoundError: Did not verify any proofs; insufficient proofs matched the acceptable suite(s) and required purpose(s).\n    at ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:194:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:84:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:6c333598-41ba-43d6-b9bc-6c6a6a1e8a62",
                        "error": "Did not verify any proofs; insufficient proofs matched the acceptable suite(s) and required purpose(s)."
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "EWF should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:f8422b60-4f4b-4ee8-a410-4401cf6638be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "LearnCard should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:527ee1c8-9e0a-4997-9daf-df02aad955e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60450,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:7ab73d60-c31c-4730-9505-b5c118e8d796",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 204,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:019248e3-ac45-49f5-9221-748ce0bced7f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify LearnCard",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:c81fd2cd-356f-4063-a109-dc410f4f5399",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "LearnCard",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "SpruceID",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:b4cee9a1-e2f7-4b51-8db8-7ab4525c0ecf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2020\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:adac583e-bad1-4c0b-bd43-a85409e23fab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2020\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF"
                    ],
                    "warnings": [],
                    "errors": [
                      "MALFORMED",
                      "MISSING_CREATED"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:70d9e0a3-e357-462d-8028-71fa082f6b91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2020\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "Credential verification failed: [\"One or more proofs failed verification\"]"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:59f512f0-e989-4f64-afcc-6f4fe3e8aaa4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61211,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 305,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:8dc59dea-aeb2-4a33-b0e7-9eac0d99416e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61517,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:60629c15-6759-4eff-83e4-9f28c038760a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61621,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2020\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [],
                    "warnings": [],
                    "errors": [
                      "No applicable proof"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "LearnCard should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:31be2f53-d010-49de-aaf8-ff3244b53336",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61649,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2020\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": "Invalid input: [\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"verifiableCredential\",\n              \"proof\",\n              \"created\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"array\",\n            \"received\": \"object\",\n            \"path\": [\n              \"verifiableCredential\",\n              \"proof\"\n            ],\n            \"message\": \"Expected array, received object\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"verifiableCredential\",\n      \"proof\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:f0b69079-3617-4945-9977-a06b84bb57ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61761,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 211,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:9375596b-552f-4a72-b6cf-646e1be31862",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:543f4346-9545-48e6-a776-a7b896c30766",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62073,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"Ed25519Signature2020\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:9151dd46-2021-47fa-86aa-4c17b3e6d668",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z37jbDZwxKcpHbz2mBkv1z39VowGCNHQzQgwYu941mEKC1Rxpv4h3WYMzGDSKmCf8zjRSa78VEiRx2UXmzDQVGPum"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "Trinsic",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:83f20f3a-5667-45d0-92ae-43470fc72edd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62164,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:eddeedb9-c0be-411d-8f55-bd2252a1a45d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-11-17T05:02:22.3507325Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"proofValue\":\"z2HKshLik5MFPi52BKhPtvuCRqWu3hVt2ZzR3scedLoVDtjDHN1msAsHYNgRRgsCVDjTA7p3D6DHCNJA1JDPQTCi\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:eddeedb9-c0be-411d-8f55-bd2252a1a45d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-11-17T05:02:22.3507325Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "proofValue": "z2HKshLik5MFPi52BKhPtvuCRqWu3hVt2ZzR3scedLoVDtjDHN1msAsHYNgRRgsCVDjTA7p3D6DHCNJA1JDPQTCi"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 500
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:ad60883a-fcd5-4e75-9aae-86f2a50cc258",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:e0bb726a-8dd5-45db-9c61-c750f918bd31",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62331,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:eddeedb9-c0be-411d-8f55-bd2252a1a45d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-11-17T05:02:22.3507325Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"proofValue\":\"z2HKshLik5MFPi52BKhPtvuCRqWu3hVt2ZzR3scedLoVDtjDHN1msAsHYNgRRgsCVDjTA7p3D6DHCNJA1JDPQTCi\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:eddeedb9-c0be-411d-8f55-bd2252a1a45d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-11-17T05:02:22.3507325Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "proofValue": "z2HKshLik5MFPi52BKhPtvuCRqWu3hVt2ZzR3scedLoVDtjDHN1msAsHYNgRRgsCVDjTA7p3D6DHCNJA1JDPQTCi"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "Credential verification failed: [\"One or more proofs failed verification\"]"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Danube Tech should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:701234ed-46b3-4aee-9702-41663e231007",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Danube Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62367,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 304,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:52aeb862-29f3-45d6-8b2c-ec98ea9d76e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62672,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "EWF should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:ee5194dc-efe9-4e1b-85e5-2613c31d4220",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "EWF"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62775,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:eddeedb9-c0be-411d-8f55-bd2252a1a45d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-11-17T05:02:22.3507325Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"proofValue\":\"z2HKshLik5MFPi52BKhPtvuCRqWu3hVt2ZzR3scedLoVDtjDHN1msAsHYNgRRgsCVDjTA7p3D6DHCNJA1JDPQTCi\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:eddeedb9-c0be-411d-8f55-bd2252a1a45d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-11-17T05:02:22.3507325Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "proofValue": "z2HKshLik5MFPi52BKhPtvuCRqWu3hVt2ZzR3scedLoVDtjDHN1msAsHYNgRRgsCVDjTA7p3D6DHCNJA1JDPQTCi"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc-api-dev.energyweb.org/v1/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "proof"
                    ],
                    "warnings": [],
                    "errors": [
                      "signature error: Verification equation was not satisfied"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "LearnCard should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:7b9b30a5-5842-480a-8579-f47bbcc7d5ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "LearnCard"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "credentials": "same-origin",
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:eddeedb9-c0be-411d-8f55-bd2252a1a45d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"Ed25519Signature2020\",\"created\":\"2024-11-17T05:02:22.3507325Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"proofValue\":\"z2HKshLik5MFPi52BKhPtvuCRqWu3hVt2ZzR3scedLoVDtjDHN1msAsHYNgRRgsCVDjTA7p3D6DHCNJA1JDPQTCi\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:eddeedb9-c0be-411d-8f55-bd2252a1a45d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "Ed25519Signature2020",
                          "created": "2024-11-17T05:02:22.3507325Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "proofValue": "z2HKshLik5MFPi52BKhPtvuCRqWu3hVt2ZzR3scedLoVDtjDHN1msAsHYNgRRgsCVDjTA7p3D6DHCNJA1JDPQTCi"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bridge.learncard.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "proof",
                      "expiration"
                    ],
                    "warnings": [],
                    "errors": [
                      "signature error: Verification equation was not satisfied"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js:66:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:3c324f09-d90a-4ff5-879f-f3fc02405dd9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:f65055a2-6375-482e-bc63-ffb1356cdc23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.not.exist(\n          issuerError,\n          `Expected issuer: ${issuerName} to not error`\n        );\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ed25519signature2020-test-suite/vc-di-ed25519signature2020-test-suite/tests/30-interop.js",
              "parent": "yfaW5ApKr7TrxwoFZVUph",
              "ctx": null,
              "_testId": "urn:uuid:5f4863ff-e501-4540-80fe-ca7a7d664a63",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "di-ed25519signature2020-test-suite",
    "subtitle": "Interoperability Report for Ed25519",
    "github": "https://github.com/w3c/vc-di-ed25519signature2020-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-ed25519signature2020-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "https://manu.sporny.org/",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ]
  },
  "title": "Ed25519Signature 2020 Interoperability Report 1.0",
  "stats": [
    "Tests passed 272/350 77%",
    "Tests failed 80/350 23%",
    "Failures 80",
    "Tests skipped 0",
    "Total tests 350"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}